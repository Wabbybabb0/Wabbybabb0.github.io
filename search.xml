<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>入坟———AlexNet模型复现</title>
      <link href="/2023/12/27/ru-fen-alexnet-mo-xing-fu-xian/"/>
      <url>/2023/12/27/ru-fen-alexnet-mo-xing-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建net"><a href="#1-创建net" class="headerlink" title="1 创建net"></a>1 创建net</h1><h2 id="1-1-torch-nn-Module"><a href="#1-1-torch-nn-Module" class="headerlink" title="1.1 torch.nn.Module()"></a>1.1 torch.nn.Module()</h2><p><strong>Base class for all neural network modules</strong></p><h3 id="1-1-1-Variables"><a href="#1-1-1-Variables" class="headerlink" title="1.1.1 Variables"></a>1.1.1 Variables</h3><ol><li><code>cuda(device=None)</code><br>Moves all model parameters and buffers to the GPU<br>将所有模型参数和缓冲区移至 GPU</li><li><code>eval()</code><br>Sets the module in evaluation mode<br>将模块设置为评估模式 ^eval</li><li><code>forward()</code><br>Defines the computation performed at every call.<br>定义每次调用时执行的计算 ^forward</li></ol><h2 id="1-2-阅读论文后得到net的参数"><a href="#1-2-阅读论文后得到net的参数" class="headerlink" title="1.2 阅读论文后得到net的参数"></a>1.2 阅读论文后得到net的参数</h2><p>关注$C_{in}$、$C_{out}$、$kernel_size$、$padding$、$stride$<br>其中，$stride$需要根据公式计算得出<br>![[a0dda904b7f38e1eea5ebad874024a7.jpg]]</p><h2 id="1-3-编写init"><a href="#1-3-编写init" class="headerlink" title="1.3 编写init"></a>1.3 编写init</h2><p>定义每个步骤的具体执行过程<br>e.g.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>c1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里规定<code>c1</code>的执行过程是接收输入通道为$3$的图像，用<code>size</code>为$11$的<code>kernel</code>…最后以输出通道为$48$作为输出</p><h2 id="1-4-编写forward"><a href="#1-4-编写forward" class="headerlink" title="1.4 编写forward"></a>1.4 编写forward</h2><p>[[#^forward]]<br>按照卷积的顺序进行x的更迭</p><h2 id="1-5-测试"><a href="#1-5-测试" class="headerlink" title="1.5 测试"></a>1.5 测试</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当这段代码只在直接运行当前脚本时才会执行，如果当前脚本被其他脚本引入作为模块使用，则这部分代码不会执行。<br>通常会对<code>x</code>和<code>y</code>赋予简单的数字对<code>net</code>进行测试</p><h1 id="2-划分数据集"><a href="#2-划分数据集" class="headerlink" title="2 划分数据集"></a>2 划分数据集</h1><h2 id="2-1-创建文件"><a href="#2-1-创建文件" class="headerlink" title="2.1 创建文件"></a>2.1 创建文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果文件不存在，则创建文件  </span><span class="token keyword">def</span> <span class="token function">mkfile</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>cla = [Cat, Dog]</li><li><code>data/train/</code>+<code>cla</code><ul><li><code>data/train/Cat</code></li><li><code>data/train/Dog</code></li><li><code>data/val/Cat</code></li><li><code>dara/val/Dog</code></li></ul></li></ul><h2 id="2-2-遍历与划分"><a href="#2-2-遍历与划分" class="headerlink" title="2.2 遍历与划分"></a>2.2 遍历与划分</h2><ol><li>遍历所有类别的图像<br><code>images</code>存储了原始data下<code>cla</code>分别为<code>Cat</code>和<code>Dog</code>的图像名称</li><li>按比例划分为训练集和测试集<br><code>eval_index</code>是<code>images</code>中的随机抽取的$\dfrac{2}{10}$的图像名称的集合</li></ol><p>随后再次遍历<code>images</code></p><ul><li>如果图像的名字在<code>eval_index</code>中存在，则将这个图像复制到新路径<code>data/val/+cla</code>(<code>val</code>中<code>Cat</code>或<code>Dog</code>的文件下)</li><li>如果不在<code>eval_index</code>中存在，则复制到<code>data/train/+cla</code>中</li></ul><h1 id="3-编写train-py"><a href="#3-编写train-py" class="headerlink" title="3 编写train.py"></a>3 编写train.py</h1><h2 id="3-1-用到的库"><a href="#3-1-用到的库" class="headerlink" title="3.1 用到的库"></a>3.1 用到的库</h2><h3 id="3-1-1-torchvision-transforms"><a href="#3-1-1-torchvision-transforms" class="headerlink" title="3.1.1 torchvision.transforms"></a>3.1.1 torchvision.transforms</h3><ol><li><p>.Normalize(<em>mean, std, inplace=False</em>)<br>ps: It’s scriptable transforms, which can’t use [[#^Compose]]    :)<br>归一化处理<br>output[channel] = (input[channel] - mean[channel] / std[channel])<br>^normalize</p></li><li><p>.Compose(<em>transforms</em>)<br>Composes several transforms together.This transform does not support torchscript.<br>^Compose</p></li></ol><h2 id="3-1-对图像像素归一化处理"><a href="#3-1-对图像像素归一化处理" class="headerlink" title="3.1 对图像像素归一化处理"></a>3.1 对图像像素归一化处理</h2><p>[[#^normalize]]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">normalize <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 减0.5再除0.5最后归一化到[-1, 1]之间</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-训练集和验证集预处理"><a href="#3-2-训练集和验证集预处理" class="headerlink" title="3.2 训练集和验证集预处理"></a>3.2 训练集和验证集预处理</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 训练集预处理  </span>train_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>      transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># Resize the input image to the given size.因此将参数设置为论文中网络输入的参数大小  </span>    transforms<span class="token punctuation">.</span>RandomVerticalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 随机垂直旋转，使数据集更多  </span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 转换为张量  </span>    normalize  <span class="token comment"># 归一化  </span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#验证集预处理  </span>val_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>      transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      normalize  <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[[#^Compose]]<br>创建数据集👇</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_dataset <span class="token operator">=</span> ImageFolder<span class="token punctuation">(</span>ROOT_TRAIN<span class="token punctuation">,</span> transform<span class="token operator">=</span>train_transform<span class="token punctuation">)</span>  val_dataset <span class="token operator">=</span> ImageFolder<span class="token punctuation">(</span>ROOT_TEST<span class="token punctuation">,</span> transform<span class="token operator">=</span>val_transform<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ImageFolder</code>用于创建一个数据集，该数据集包含了图像数据和相应的标签</p><p>👇设置批量加载</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  val_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>DataLoader</code>用于从数据集中加载批量数据的工具<br>每批数据有32个样本<br><code>shuffle=True</code>表示每个<code>epoch</code>开始前对数据继续随机排序</p><h2 id="3-4-使用GPU加载数据"><a href="#3-4-使用GPU加载数据" class="headerlink" title="3.4 使用GPU加载数据"></a>3.4 使用GPU加载数据</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> <span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span>  model <span class="token operator">=</span> MyAlexNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment"># 将'MyAlexNet'实例化对象移动到'device'上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-5-定义损失函数和优化器并设置学习率"><a href="#3-5-定义损失函数和优化器并设置学习率" class="headerlink" title="3.5 定义损失函数和优化器并设置学习率"></a>3.5 定义损失函数和优化器并设置学习率</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个损失函数  </span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 定义一个优化器  </span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>  <span class="token comment"># 将模型参数传给优化器  </span><span class="token comment"># 学习率每隔10轮变为原来的0.5  </span>lr_scheduler <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token comment"># 帮助优化器再训练过程中逐步减小学习率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6-定义训练函数和损失函数"><a href="#3-6-定义训练函数和损失函数" class="headerlink" title="3.6 定义训练函数和损失函数"></a>3.6 定义训练函数和损失函数</h2><p>①从<code>dataloader</code>中取出图像数据和对应的标签<br>②计算<code>cur_loss</code>和<code>cur_acc</code>^train</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_fn<span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span><span class="token punctuation">:</span>loss<span class="token punctuation">,</span> current<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span>  <span class="token keyword">for</span> batch<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 将数据取出来训练  </span>    image<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>      output <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>      cur_loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">)</span>      _<span class="token punctuation">,</span> pred <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>output<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>      cur_acc <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y<span class="token operator">==</span>pred<span class="token punctuation">)</span><span class="token operator">/</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③反向传播</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 反向传播  </span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  cur_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>④计算$\dfrac{所有损失值}{个数}$和$\dfrac{所有正确值}{个数}$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss <span class="token operator">+=</span> cur_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>  current <span class="token operator">+=</span> cur_acc<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>  n <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span>train_loss <span class="token operator">=</span> loss <span class="token operator">/</span> n  train_acc <span class="token operator">=</span> current <span class="token operator">/</span> n  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'train_loss'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'train_acc'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> train_loss<span class="token punctuation">,</span> train_acc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>损失函数除了不需要反向传播，其他都和训练函数类似</p><h2 id="3-7-定义画图函数"><a href="#3-7-定义画图函数" class="headerlink" title="3.7 定义画图函数"></a>3.7 定义画图函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个画图函数  </span><span class="token keyword">def</span> <span class="token function">matplot_loss</span><span class="token punctuation">(</span>train_loss<span class="token punctuation">,</span> val_loss<span class="token punctuation">)</span><span class="token punctuation">:</span>      plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train_loss'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>val_loss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'val_loss'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'loss'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'epoch'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"训练集和验证集loss值对比图"</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">matplot_acc</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">,</span> val_acc<span class="token punctuation">)</span><span class="token punctuation">:</span>      plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>train_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train_acc'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>val_acc<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'acc'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'epoch'</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"训练集和验证集acc值对比图"</span><span class="token punctuation">)</span>      plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-8-开始训练"><a href="#3-8-开始训练" class="headerlink" title="3.8 开始训练"></a>3.8 开始训练</h2><p>①初始化四个<code>list</code>，定义<code>epoch</code>和<code>min_acc</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  acc_train <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  loss_val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  acc_val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>epoch <span class="token operator">=</span> <span class="token number">20</span>  min_acc <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 最小精确度，找出最好的模型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②调用<code>train</code>和<code>val</code>函数进行训练<br>[[#^train]]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> t <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>      lr_scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"epoch</span><span class="token interpolation"><span class="token punctuation">{</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">\n-------"</span></span><span class="token punctuation">)</span>      train_loss<span class="token punctuation">,</span> train_acc <span class="token operator">=</span> train<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_fn<span class="token punctuation">,</span> optimizer<span class="token punctuation">)</span>      val_loss<span class="token punctuation">,</span> val_acc <span class="token operator">=</span> val<span class="token punctuation">(</span>val_dataloader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③计算得到的<code>train_loss</code>、<code>train_acc</code>、<code>val_loss</code>、<code>val_acc</code>分别放入到初始化的四个<code>list</code>中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表  </span>loss_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span>  acc_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>  loss_val<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val_loss<span class="token punctuation">)</span>  acc_val<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val_acc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④保存最好的权重和最后一轮的权重</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 保存最好的权重  </span><span class="token keyword">if</span> val_acc <span class="token operator">&gt;</span> min_acc<span class="token punctuation">:</span>      folder <span class="token operator">=</span> <span class="token string">'save_model'</span>      <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">:</span>          os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'save_model'</span><span class="token punctuation">)</span>      min_acc <span class="token operator">=</span> val_acc      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"save best model, 第</span><span class="token interpolation"><span class="token punctuation">{</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">轮"</span></span><span class="token punctuation">)</span>      torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'save_model/best_model.pth'</span><span class="token punctuation">)</span>  <span class="token comment"># 保存最后一轮的权重文件  </span><span class="token keyword">if</span> t <span class="token operator">==</span> epoch<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>      torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'save_model/last_model.pth'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有<code>val_acc</code>(某一个轮次训练得到的)大于<code>min_acc</code>，则说明该次的训练效果暂时是目前最好的，保存到<code>.save_model/best_model.pth</code>中</p><h2 id="3-9-画图"><a href="#3-9-画图" class="headerlink" title="3.9 画图"></a>3.9 画图</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">matplot_loss<span class="token punctuation">(</span>loss_train<span class="token punctuation">,</span> loss_val<span class="token punctuation">)</span>  matplot_acc<span class="token punctuation">(</span>acc_train<span class="token punctuation">,</span> acc_val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="4-编写test-py"><a href="#4-编写test-py" class="headerlink" title="4 编写test.py"></a>4 编写test.py</h1><h2 id="4-1-训练集和验证集预处理、调用GPU"><a href="#4-1-训练集和验证集预处理、调用GPU" class="headerlink" title="4.1 训练集和验证集预处理、调用GPU"></a>4.1 训练集和验证集预处理、调用GPU</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>      transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># Resize the input image to the given size.因此将参数设置为论文中网络输入的参数大小  </span>    transforms<span class="token punctuation">.</span>RandomVerticalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 随机垂直旋转，使数据集更多  </span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 转换为张量  </span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#验证集预处理  </span>val_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>      transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      normalize  <span class="token punctuation">]</span><span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> ImageFolder<span class="token punctuation">(</span>ROOT_TRAIN<span class="token punctuation">,</span> transform<span class="token operator">=</span>train_transform<span class="token punctuation">)</span>  val_dataset <span class="token operator">=</span> ImageFolder<span class="token punctuation">(</span>ROOT_TEST<span class="token punctuation">,</span> transform<span class="token operator">=</span>val_transform<span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  val_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    device <span class="token operator">=</span> <span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span>  model <span class="token operator">=</span> MyAlexNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment"># 将'MyAlexNet'实例化对象移动到'device'上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-加载模型"><a href="#4-2-加载模型" class="headerlink" title="4.2 加载模型"></a>4.2 加载模型</h2><p>加载<code>best_model.pth</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"E:/Project/Cat_and_Dog_Classification/save_model/best_model.pth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-3-验证阶段"><a href="#4-3-验证阶段" class="headerlink" title="4.3 验证阶段"></a>4.3 验证阶段</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">3010</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      x<span class="token punctuation">,</span> y <span class="token operator">=</span> val_dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val_dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># x为第i张照片的的图片，y为第i张图片的标签  </span>    show<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>      x <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>      x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>model.eval()</code><br>[[#^eval]]<br><code>torch.unsqueeze(x, dim=0)</code>将<code>x</code>在维度0上添加一个维度，大小为1(批次维度)</p><p>在禁止梯度计算的情况下得到<code>predicted</code>和<code>actual</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>      predicted<span class="token punctuation">,</span> actual <span class="token operator">=</span> classes<span class="token punctuation">[</span>torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>pred<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> classes<span class="token punctuation">[</span>y<span class="token punctuation">]</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'predicted:"</span><span class="token interpolation"><span class="token punctuation">{</span>predicted<span class="token punctuation">}</span></span><span class="token string">", Actual:"</span><span class="token interpolation"><span class="token punctuation">{</span>actual<span class="token punctuation">}</span></span><span class="token string">"'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pred</code>：<code>tensor([[-2.1302,  2.3210]], device='cuda:0')</code><br><code>y</code>：<code>0</code>(Cat)或者<code>1</code>(Dog)</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————CNN(李宏毅)</title>
      <link href="/2023/11/19/ru-men-cnn-li-hong-yi/"/>
      <url>/2023/11/19/ru-men-cnn-li-hong-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Image-Classification"><a href="#1-Image-Classification" class="headerlink" title="1 Image Classification"></a>1 Image Classification</h1><p>一张100x100pixels的图片其实是一个3D-tensor：<br>①图片的高<code>100</code>②图片的宽<code>100</code>③3 channels<code>RGB</code><br>![[Pasted image 20231104203002.png|350]]<br>每一个数值代表某一个颜色某一个pixel的强度</p><h1 id="2-Image-Feature-Observation"><a href="#2-Image-Feature-Observation" class="headerlink" title="2 Image Feature Observation"></a>2 Image Feature Observation</h1><h2 id="2-1-Observation-1"><a href="#2-1-Observation-1" class="headerlink" title="2.1 Observation 1"></a>2.1 Observation 1</h2><ol><li>Identifying some critical patterns<br> 比如说一只鸟，只用看鸟嘴、眼睛和脚也能大致辨认出来<br> A neuron does not have to see the whole image</li><li>Simplification<br> 设定一个区域为Receptive field，每一个neuron只关心自己的Receptive field。<br> Receptive field can be overlapped<br> neuron can have the same receptive field<br> <img src="/%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E2%80%94%E2%80%94CNN(%E6%9D%8E%E5%AE%8F%E6%AF%85">/Pasted image 20231104204207.png)</li><li>Simplification 1-Typical Setting</li><li>会看all channels，不用提深度，高和宽合起来叫kernel size</li><li>Each receptive field has a set of neurons</li><li>平移receptive field，步长为stride，receprive field有重叠，防止交界处有pattern没被neuron侦测到</li><li>平移时超出范围了，用填补0代替超出的范围(方法不唯一)</li></ol><h2 id="2-2-Observation-2"><a href="#2-2-Observation-2" class="headerlink" title="2.2 Observation 2"></a>2.2 Observation 2</h2><ol><li>The same patterns appear in different regions<br> 👇solution: parameter sharing<br> 线条代表weight，相同颜色代表weight一样，守备的receptive field不一样，参数一样，因为输入不一样，所以输出也不一样<br> ![[Pasted image 20231104215341.png|475]]</li><li>Simplification 2-Typical Setting<ol><li>每一个receptive field都有一组neurons</li><li>相同颜色的圆圈代表共享一样的参数的neurons</li><li>每一个receptive field都只有一组参数，这些参数叫filter x<br> ![[Pasted image 20231104215840.png|500]]</li></ol></li></ol><h2 id="2-3-Obeservation-3"><a href="#2-3-Obeservation-3" class="headerlink" title="2.3 Obeservation 3"></a>2.3 Obeservation 3</h2><p>Subsampling the pixels will not change the object<br>e.g.拿掉image奇数行和偶数列的pixels，图片变成原来的$\frac{1}{4}$大小</p><h1 id="3-Benefit-of-Convolutional-Layer"><a href="#3-Benefit-of-Convolutional-Layer" class="headerlink" title="3 Benefit of Convolutional Layer"></a>3 Benefit of Convolutional Layer</h1><ul><li><code>Fully Connected Layer</code>不需要看整个图片，只需要重要的pattern👉<code>receptive field</code>某一些neurons一定要一摸一样👉<code>parameter sharing</code></li><li><code>receptive field</code>+<code>parameter sharing</code>=<code>convolutional layer</code>，虽然会有较大的model bias，但是convolutional layer是专门为影像设计的，所以用在image上偏差不会很大</li><li>用<code>convolutional layer</code>的network叫做<code>CNN</code></li></ul><h1 id="4-Multiple-Convolutional-Layers"><a href="#4-Multiple-Convolutional-Layers" class="headerlink" title="4 Multiple Convolutional Layers"></a>4 Multiple Convolutional Layers</h1><ul><li>n个filters可形成feature map with n channels</li><li>![[Pasted image 20231104223016.png|425]]<ol><li>先是将<code>RGB</code>图片放入convolution里，假设有64个filter(每个filter都是3x3x3)，那么就会得到一个 feature map(可以看作是一个新的图片，只是他的channels有64个) </li><li>再把feature map放入convolution里，filter的大小为：3x3x<strong>64</strong>(filter的高度就是它要处理的image的channel)</li></ol></li><li>filter比较小的情况下也能让network看比较大范围的pattern<br>   ![[Pasted image 20231104224407.png|400]]<br>   右下角蓝色圆圈的是其中一个filter，右上角是image，image左上角红色框对应filter左上角红色框，image右下角红色框对应filter右下角红色框。feature map的3x3对应image的5x5<br>![[Pasted image 20231104225301.png|475]]</li></ul><h1 id="5-Pooling-Max-Pooling"><a href="#5-Pooling-Max-Pooling" class="headerlink" title="5 Pooling - Max Pooling"></a>5 Pooling - Max Pooling</h1><p>在feature map中，n x n个数字一组<br>![[Pasted image 20231104225853.png|275]]👉![[Pasted image 20231104225920.png|275]]<br>max pooling就是选一组里最大的那个数<br>做完convolution之后通常会搭配pooling，pooling不改变channels，但是改变长宽</p><h1 id="6-The-whole-CNN"><a href="#6-The-whole-CNN" class="headerlink" title="6 The whole CNN"></a>6 The whole CNN</h1><p>Flatten：将pooling的output本来矩阵的样子拉直</p><h1 id="7-Application-Playing-Go"><a href="#7-Application-Playing-Go" class="headerlink" title="7 Application: Playing Go"></a>7 Application: Playing Go</h1><ul><li>Alpha Go uses 5x5 for first layer，可能是5x5的范围比较重要</li><li>同样可能存在相同的patters在不同的regions里</li><li>不用pooling</li></ul><h1 id="8-实操"><a href="#8-实操" class="headerlink" title="8 实操"></a>8 实操</h1><h2 id="8-1-Code"><a href="#8-1-Code" class="headerlink" title="8.1 Code"></a>8.1 Code</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transformsimage_data <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># Your image data here</span><span class="token comment"># Applying the transformations</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>transformed_data <span class="token operator">=</span> transform<span class="token punctuation">(</span>image_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-2-原理"><a href="#8-2-原理" class="headerlink" title="8.2 原理"></a>8.2 原理</h2><p>![[Pasted image 20231113221316.png]]</p><h1 id="9-Advanced-CNN"><a href="#9-Advanced-CNN" class="headerlink" title="9 Advanced CNN"></a>9 Advanced CNN</h1><ul><li>当训练次数过多时会发生过拟合，因此并不是训练次数越多模型准确度越高</li><li>解决梯度消失(过拟合)，使用<strong>Residual net</strong></li></ul><p>![[Pasted image 20231119135500.png|300]]<br>$z=H(x)$<br>$\dfrac{\partial z}{x}=\dfrac{\partial F(x)}{\partial x} + \dfrac{\partial x}{\partial x}=\dfrac{\partial F(x)}{\partial x}+1$<br>梯度=$\dfrac{\partial L}{\partial z}\times\dfrac{\partial z}{\partial x}$<br>当$\dfrac{\partial F}{\partial x}$很小的时候，$\dfrac{\partial z}{\partial x}$不会在0的附近</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/02/hello-world/"/>
      <url>/2023/11/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐含迪利克雷模型LDA</title>
      <link href="/2023/05/21/ru-fen-lda-mo-xing/"/>
      <url>/2023/05/21/ru-fen-lda-mo-xing/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/v_JULY_v/article/details/41209515?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;utm_relevant_index=2">参考博客</a></p><h1 id="1-整体把握"><a href="#1-整体把握" class="headerlink" title="1.整体把握"></a>1.整体把握</h1><p>LDA是一种<strong>主题模型</strong>，可以将文档集中每篇文档的主题以<strong>概率分布</strong>的形式给出，根据给定的一篇文章，反推其主题分布</p><p>一篇文档可以包含多个主题，文档中每一个词都由其中的一个主题生成</p><h2 id="1-1LDA的图模型结构"><a href="#1-1LDA的图模型结构" class="headerlink" title="1.1LDA的图模型结构"></a>1.1LDA的图模型结构</h2><p>  类似贝叶斯网络结构</p><p><img src="/../../../../medias/blog_picture/LDA/1.PNG"></p><h3 id="1-1-1贝叶斯的定义"><a href="#1-1-1贝叶斯的定义" class="headerlink" title="1.1.1贝叶斯的定义"></a>1.1.1贝叶斯的定义</h3><p>  节点表示随机变量${X_1,X_2,…,X_n}$，认为有<strong>因果关系</strong>(或非条件独立)的变量或命题用箭头来连接。如果用一个单箭头来连接，表示其中一个节点是“因(parents)”，另一个是“果(children)”，两节点就会产生一个条件概率值</p><p><img src="/../../../../medias/blog_picture/LDA/2.PNG"></p><p>  👆圈表示随机变量(random variables)，用箭头表示条件依赖(conditional dependencies)</p><p>  令$G = (I,E)$表示一个有向无环图(DAG)，其中I代表图形中所有的节点的集合，而E代表有向连接线段的集合，且令$X = (X_i),i ∈ I$为其有向无环图中的某一节点i所代表的随机变量，若节点X的联合概率可以表示成$p(x)=\prod\limits_{i\in I}p(x_i|x_{pa(i)})$，则称$X$为相对于一有向无环图G 的贝叶斯网络，其中，$pa(i)$表示节点i之“因”，或称$pa(i)$是$i$的parents（父母）。</p><p>  联合概率：事件A和事件B同时发生的概率，记为$P(AB)$或$P(A,B)$或$P(A∩B)$</p><p>  对于任意的随机变量，其联合概率可由各自的局部条件概率分布相乘得出：</p><p>  $$p(x_1,….,x_K)=p(x_K|x_1,….,x_{K-1})…p(x_2|x_1)p(x_1)$$</p><p><img src="/../../../../medias/blog_picture/LDA/3.PNG"></p><p>  👆一个简单的贝叶斯网络(a导致b，a和b导致c)</p><p>  $$p(a,b,c)=p(c|a.b)p(b|a)p(a)$$</p><h2 id="1-2二项式分布"><a href="#1-2二项式分布" class="headerlink" title="1.2二项式分布"></a>1.2二项式分布</h2><p>随机变量只有两个(非正即负)，即重复n次的伯努利实验，记为$X\sim b(n,p)$</p><p>二项分布的概率密度函数为：</p><p><img src="/../../../../medias/blog_picture/LDA/4.PNG"></p><p> 对于k = 0, 1, 2, …, n，其中的</p><p><img src="/../../../../medias/blog_picture/LDA/5.PNG"></p><p>是二项式系数（这就是二项分布的名称的由来），又记为$\dfrac{n!}{k!(n-k)!}$</p><h2 id="1-3多项式分布"><a href="#1-3多项式分布" class="headerlink" title="1.3多项式分布"></a>1.3多项式分布</h2><p>由二项分布扩展到多维的情况</p><p>随机变量取值不是0-1，而是有多种离散值的可能(1,2,3,…,k)</p><p>假设有$$i$$个离散值，那么有$\sum_{i=1}^kp_i=1,p_i&gt;0$</p><p>多项式分布的概率密度函数为：$$P(x_1,x_2,…,x_k;n,p_1,p_2,…,p_k)=\dfrac{n!}{x_1!…x_k!}p^{x_1}…p^{x_k}$$</p><h2 id="1-4Gamma分布"><a href="#1-4Gamma分布" class="headerlink" title="1.4Gamma分布"></a>1.4Gamma分布</h2><p><a href="https://zhuanlan.zhihu.com/p/69606875">Beta函数和Gamma函数的关系</a></p><p>Gamma函数实际意义：阶乘一般化，将阶乘推广到实数域</p><p>This content is only supported in a Feishu Docs</p><h1 id="2-Beta分布"><a href="#2-Beta分布" class="headerlink" title="2.Beta分布"></a>2.Beta分布</h1><p>This content is only supported in a Feishu Docs</p><h2 id="2-1Beta分布"><a href="#2-1Beta分布" class="headerlink" title="2.1Beta分布"></a>2.1Beta分布</h2><p>beta是指一组定义在$$(0,1)$$区间的连续概率分布，有两个参数$$\alpha$$和$$\beta$$，且$$\alpha,\beta&gt;0$$</p><p>二项分布的共轭先验分布</p><p>给定参数$$\alpha&gt;0$$和$$\beta&gt;0$$，取值范围为[0,1]的随机变量 x 的概率密度函数：$$f(x;\alpha,\beta)=\dfrac{1}{B(\alpha,\beta)}x^{\alpha-1}(1-x)^{\beta-1}$$</p><p>其中$\dfrac{1}{B(\alpha,\beta)}=\dfrac{\Gamma(\alpha+\beta)}{\Gamma(\alpha)\Gamma(\beta)},\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt$</p><p>见pdf</p><h2 id="2-2Beta-Binomial共轭"><a href="#2-2Beta-Binomial共轭" class="headerlink" title="2.2Beta-Binomial共轭"></a>2.2Beta-Binomial共轭</h2><ul><li>问题引入：<ul><li><strong>问题1</strong>：随机变量$X_1,X_2,…,X_n\sim^{idd}Uniform(0,1)$，把这n个随机变量排序后得到顺序统计量$X_{(1)},X_{(2)},…,X_{(n)}$，问$X_{(k)}$的分布是什么</li><li><strong>问题2</strong>：$X_{(k)}$的分布是什么 &lt;==&gt; 猜测$p=X_{(k)}$，<ul><li>$Y_1,Y_2,…,Y_n\sim^{idd}Uniform(0,1)$,$Y_i$$中有$$m_1$$个比$$p$$小，$$m_2$个比$p$大，问$P(p|Y_1,Y_2,…Y_m)$的分布是什么</li></ul></li></ul></li><li>分析：<ul><li>换言之，$Y_i$中有$m_1$个比$X_{(k)}$小，有$m_2$个比$X_{(k)}$大，所以$X_{(k)}$是$X_1,X_2,…,X_n,Y_1,Y_2,…,Y_n\sim^{idd}Uniform(0,1)$中第$k+m_1$大的数</li><li>事件服从Beta分布</li><li>可知$p=X_{(k)}$的密度概率函数为：$$Beta(p|k+m_1,n-k+1+m_2)$$</li></ul></li><li>与贝叶斯结合过程<ul><li><p>贝叶斯派思考问题的固定模式：</p></li><li><p><strong>先验分布</strong>$\pi(\theta)$<strong>+ 样本信息</strong>$$X$$$$\rightarrow$$<strong>后验分布</strong>$\pi(\theta|x)$</p></li><li><p>在得到新的样本信息之前，人们对$\theta$的认知是先验分布$\pi(\theta)$，在得到新的样本信息</p><p>$X$后，人们对$\theta$的认知为$\pi(\theta|x)$</p></li><li><p>过程</p><ul><li>为了猜测$p=X_{(k)}$，在获得一定的观测数据前，我们对$p$的认知是：$f(p)=Beta(p|k,n-k+1)$，此称为$p$的先验分布</li><li>为了获得结果“$Y_i$中有$m_1$个比$p$小，$m_2$个比$p$大”，针对$Y_i$做了$m$次伯努利实验，所以$m_1$服从二项分布$B(m,p)$</li><li>在得到$(m_1,m_2)$的数据后，$p$的后验分布为$$f(p|m_1,m_2)=Beta(p|k+m_1,n-k+1+m_2)$$</li></ul></li><li><p>结合贝叶斯</p><ul><li>$$Beta(p|k,n-k+1)+Count(m_1,m_2)=Beta(p|k+m_1,n-k+1+m_2)$$</li><li>更一般的，对于非负实数$\alpha$和$\beta$：有如下关系$$Beta(p|\alpha,\beta)+Count(m_1,m_2)=Beta(p|\alpha+m_1,\beta+m_2)$$，其中$Count(m_1,m_2)$对应$B(m,p)$</li><li>针对这种观测到的数据符合以下条件的，就是Beta-Binomial共轭，换言之，Beta分布是二项式分布的共轭先验概率分布<ul><li>条件一：二项分布</li><li>条件二：参数的先验分布和后验分布都是Beta分布</li><li>共轭先验分布→2.3</li></ul></li><li>二项分布和Beta分布是共轭分布意味着，如果我们为二项分布的参数p选取的先验分布是Beta分布，那么以p为参数的二项分布用贝叶斯估计得到的后验分布仍然服从Beta分布</li></ul></li><li><p>$\alpha$和$\beta$可以认为是形状参数</p></li></ul></li></ul><h2 id="2-3共轭先验分布"><a href="#2-3共轭先验分布" class="headerlink" title="2.3共轭先验分布"></a>2.3共轭先验分布</h2><p>如果后验概率和先验概率满足同样的分布律，那么先验分布和后验分布被叫做共轭分布，同时，先验分布叫做似然函数的共轭先验分布。</p><p>  比如，某观测数据服从概率分布P(θ)(先验)时，当观测到新的X数据(样本信息)时，我们一般会遇到如下问题：</p><ul><li>可否根据新观测数据X，更新参数θ？</li><li>根据新观测数据可以在多大程度上改变参数θ，即$\theta \leftarrow \theta + \triangle \theta$</li><li>当重新估计θ的时候，给出新参数值θ的新概率分布，即P(θ|x)。</li></ul><h2 id="2-4从Beta分布推广到Dirichlet分布"><a href="#2-4从Beta分布推广到Dirichlet分布" class="headerlink" title="2.4从Beta分布推广到Dirichlet分布"></a>2.4从Beta分布推广到Dirichlet分布</h2><p>见pdf</p><p>结论是：对于Beta分布的随机变量，其均值(期望)可以用$\dfrac{\alpha}{\alpha+\beta}$来估计</p><p>类比到Dirichlet分布：如果$\mathop{p}\limits^{\rightarrow}\sim Dir(\mathop{t}\limits^{\rightarrow}|\mathop{\alpha}\limits^{\rightarrow})$，那么有$$E(\mathop{p}\limits^{\rightarrow})=(\dfrac{\alpha_1}{\sum^K_{i=1}\alpha_i},\dfrac{\alpha_2}{\sum^K_{i=1}\alpha_i},…,\dfrac{\alpha_3}{\sum^K_{i=1}\alpha_i})$$</p><h1 id="3-Dirichlet分布"><a href="#3-Dirichlet分布" class="headerlink" title="3.Dirichlet分布"></a>3.Dirichlet分布</h1><p>是beta分布在高纬度上的推广</p><p>$$f(x_1,x_2,…,x_k;\alpha_1,\alpha_1,…,\alpha_k)=\dfrac{1}{B(\alpha)}\prod_{i=1}^kx_{i}^{a^i-1}$$</p><p>其中$$B(\alpha)=\dfrac{\prod_{i=1}^k\Gamma(a^i)}{\Gamma(\sum_{i=1}^k)a^i},\sum x_i=1$$</p><h2 id="3-1Dirichlet分布"><a href="#3-1Dirichlet分布" class="headerlink" title="3.1Dirichlet分布"></a>3.1Dirichlet分布</h2><p>This content is only supported in a Feishu Docs</p><h2 id="3-2Dirichlet-Multinomial共轭"><a href="#3-2Dirichlet-Multinomial共轭" class="headerlink" title="3.2Dirichlet-Multinomial共轭"></a>3.2Dirichlet-Multinomial共轭</h2><ul><li>问题引入：在2.2的问题2的基础上继续深入<ul><li><strong>问题3</strong>：随机变量$X_1,X_2,…,X_n\sim^{idd}Uniform(0,1)$，把这n个随机变量排序后得到顺序统计量$X_{(1)},X_{(2)},…,X_{(n)}$，问$(X_{(k_1)},X_{k_1+k_2})$的联合分布是什么<ul><li>计算见pdf</li></ul></li><li>为论证Dirichlet分布是多项式分布的共轭先验概率分布，在问题3的基础上继续深入<ul><li>问题4：<ul><li>随机变量$X_1,X_2,…,X_n\sim^{idd}Uniform(0,1)$，把这n个随机变量排序后得到顺序统计量$X_{(1)},X_{(2)},…,X_{(n)}$</li><li>令$p_1=X_{k_1},p_2=X(k_1+k_2),p_3=1-p_1-p_2$，现在要猜测$$\mathop{p}\limits^{\rightarrow}=(p_1,p_2,p_3)$$</li><li>$Y_1,Y_2,…,Y_m\sim^{idd}Uniform(0,1)$，$Y_i$中落到$(0,p_1],[p_1,p_2),[p_2,1]$三个区间的个数分别为$m_1,m_2,m_3$，$m=m_1+m_2+m_3$</li><li>问后验分布$P(\mathop{p}\limits^{\rightarrow}|Y_1,Y_2,…Y_m)$的分布是什么</li><li>讨论见pdf</li></ul></li></ul></li></ul></li><li>与贝叶斯结合推理：<ul><li>要猜测参数$\mathop{p}\limits^{\rightarrow}=(p_1,p_2,p_3)$，其先验分布为$Dir(\mathop{p}\limits^{\rightarrow}|\mathop{k}\limits^{\rightarrow})$</li><li>$Y_1,Y_2,…,Y_m\sim^{idd}Uniform(0,1)$，$Y_i$中落到$(0,p_1],[p_1,p_2),[p_2,1]$三个区间的个数分别为$m_1,m_2,m_3$，所以$\mathop{m}\limits^{\rightarrow}=(m_1,m_2,m_3)$服从多项分布$Mult(\mathop{m}\limits^{\rightarrow}|\mathop{p}\limits^{\rightarrow})$</li><li>给定了来自数据提供的$\mathop{m}\limits^{\rightarrow}$后，$\mathop{p}\limits^{\rightarrow}$的后验分布变为$Dir(\mathop{p}\limits^{\rightarrow}|\mathop{k}\limits^{\rightarrow}+\mathop{m}\limits^{\rightarrow})$</li><li>直观表述：<ol><li>$Dir(\mathop{p}\limits^{\rightarrow}|\mathop{k}\limits^{\rightarrow})+MultCount(\mathop{m}\limits^{\rightarrow})=Dir(\mathop{p}\limits^{\rightarrow}|\mathop{k}\limits^{\rightarrow}+\mathop{m}\limits^{\rightarrow})$</li><li>令$\mathop{\alpha}\limits^{\rightarrow}=\mathop{k}\limits^{\rightarrow}，可以把$$\mathop{\alpha}\limits^{\rightarrow}$从整数集合延拓到实数集合，从而得到更一般的表达：</li><li>$Dir(\mathop{p}\limits^{\rightarrow}|\mathop{\alpha}\limits^{\rightarrow})+MultCount(\mathop{m}\limits^{\rightarrow})=Dir(\mathop{p}\limits^{\rightarrow}|\mathop{\alpha}\limits^{\rightarrow}+\mathop{m}\limits^{\rightarrow})$</li></ol></li></ul></li><li>结论：<ul><li>观测到的数据符合多项分布</li><li>参数的先验分布和后验分布都是Dirichlet分布</li><li>就是Dirichlet-Multinomial共轭</li><li>一般形式的Dirichlet分布定义和对于给定的$\mathop{p}\limits^{\rightarrow}$和$N$，其多项式分布见pdf</li><li>Dirichlet分布$Dir(\mathop{p}\limits^{\rightarrow}|\mathop{\alpha}\limits^{\rightarrow})$和多项分布$MultCount(\mathop{n}\limits^{\rightarrow}|\mathop{p}\limits^{\rightarrow},N)$是共轭关系</li></ul></li></ul><h1 id="4-LDA模型"><a href="#4-LDA模型" class="headerlink" title="4.LDA模型"></a>4.LDA模型</h1><p><strong>定义的变量</strong></p><ul><li>$$w$$表示词，$$V$$表示所有单词的个数（固定值）</li><li>$$z$$表示主题，是主题的个数（预先给定，固定值）</li><li>$$D(w_1,…,w_M)$$表示语料库，其中的$$M$$是语料库中的文档数（固定值）</li><li>$$\mathbf{w}=(w_1,w_2,…,w_N)$$表示文档，其中的$$N$$表示一个文档中的词数（随机变量）</li></ul><h2 id="4-1各个模型基础"><a href="#4-1各个模型基础" class="headerlink" title="4.1各个模型基础"></a>4.1各个模型基础</h2><h3 id="4-1-1Unigram-model"><a href="#4-1-1Unigram-model" class="headerlink" title="4.1.1Unigram model"></a>4.1.1Unigram model</h3><p>对于文档$\mathbf{w}=(w_1,w_2,…,w_N)$，用$p(w_n)$表示词$w_n$的先验概率，生成文档$\mathbf{w}$的概率为：$p(\mathbf{w})=\sum^N_{n=1}p(w_n)$</p><p>图模型为</p><ul><li><p>图模型一</p><ul><li><p>(图中被涂色的w(word)表示可观测变量，N表示一篇文档中总共N个单词，M表示M篇文档)</p></li><li><p><img src="/../../../../medias/blog_picture/LDA/6.PNG"></p></li></ul></li><li><p>图模型二</p><ul><li><p><img src="/../../../../medias/blog_picture/LDA/7.PNG"></p></li><li><p>nigram model假设文本中的词服从Multinomial分布，而我们已经知道Multinomial分布的先验分布为Dirichlet分布。上图中的$w_n$表示在文本中观察到的第n个词，$n\in[1,N]$表示该文本中一共有$N$个单词。加上方框表示重复，即一共有$N$个这样的随机变量$w_n$。其中，$p$和$\alpha$是隐含未知变量：</p></li><li><p>$p$是词服从的Multinomial分布的参数</p></li><li><p>$\alpha$是Dirichlet分布(即Multinomial分布的先验分布)的参数</p></li><li><p>一般$\alpha$由经验事先给定(先验)，$p$由观察到的文本中出现的词学习得到(样本)，表示文本中出现每个词的概率</p></li></ul></li></ul><h3 id="4-1-2Mixture-of-unigrams-model"><a href="#4-1-2Mixture-of-unigrams-model" class="headerlink" title="4.1.2Mixture of unigrams model"></a>4.1.2Mixture of unigrams model</h3><p>该模型的生成过程是：给某个文档先选择一个主题$$z$$，再根据该主题生成文档，该文档中的所有词都来自一个主题。假设主题有$$z_1,…z_k$$，生成文档$$\mathbf{w}$$的概率为：</p><p>$$p(\mathbf{w})=p(z_1)\prod^N_{n=1}p(w_n|z_1)+…+p(z_k)\prod^N_{n=1}p(w_n|z_k)=\sum_zp(z)\prod^N_{n=1}p(w_n|z)$$</p><p>图模型为：(图中被涂色的w表示可观测变量，未被涂色的z表示未知的隐变量，N表示一篇文档中总共N个单词，M表示M篇文档)</p><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=N2EwNjVhYjBkNmNmZmIwYWQ0ZTEwNTFkMDhkYTI2MTRfWlBzcTB6dEM3VEl4cmZQTmwzU1Vpbmh4M2s5YXZ3d0xfVG9rZW46T2lQY2JBWXF5b1E0cEt4eGtJQ2NXVHJHbldiXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><h2 id="4-2PLSA模型"><a href="#4-2PLSA模型" class="headerlink" title="4.2PLSA模型"></a>4.2PLSA模型</h2><p>建议直接<a href="https://blog.csdn.net/v_JULY_v/article/details/41209515?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;utm_relevant_index=2">看</a></p><h3 id="4-2-1pLSA模型下生成文档"><a href="#4-2-1pLSA模型下生成文档" class="headerlink" title="4.2.1pLSA模型下生成文档"></a>4.2.1pLSA模型下生成文档</h3><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=NjlkNjI0MDZhYTA5NzU5YTZjYjJmYjRlNDQwZDlmY2FfM2RlOFdrZkNwM0o0Rk5vZE9tZXBOVDNPZThhMFZYNVlfVG9rZW46R3lYQWJyZjFnbzRlV1l4Q3lMVmNiSGpCbmNkXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><h3 id="4-2-2根据文档反推其主题分布"><a href="#4-2-2根据文档反推其主题分布" class="headerlink" title="4.2.2根据文档反推其主题分布"></a>4.2.2根据文档反推其主题分布</h3><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=N2NjNWE4M2Q0OTZkNDNlMTM4NGU5YjQ4ZWFkNWFmZTBfMW9Sc2ZnUGlVd1ZLcndueW5XcEc5aU9uRk5Sc3JLUXRfVG9rZW46TkRyemJsUTZCb1BUVG54aUlCQmNuZkFhbnZmXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=MjI1ZWMwNDc1NjM0ZWY2M2MzNWUzZmIzZmYyY2MwMjRfVkEwbjQ2ZnV6bUpEcFhueG81YTdFUW9lckZSRzVDNjFfVG9rZW46TWtrWmJwSThjb1hkOFB4bmVRQWNpejdpblFnXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><h3 id="4-2-3EM算法"><a href="#4-2-3EM算法" class="headerlink" title="4.2.3EM算法"></a>4.2.3EM算法</h3><p>This content is only supported in a Feishu Docs</p><h4 id="4-2-3-1EM算法的简单介绍"><a href="#4-2-3-1EM算法的简单介绍" class="headerlink" title="4.2.3.1EM算法的简单介绍"></a>4.2.3.1EM算法的简单介绍</h4><p><a href="https://zhuanlan.zhihu.com/p/78311644">EM算法</a></p><p>隐变量$$Z=(z_1,z_2,z_3,z_4,z_5)$$代表每一轮所使用的硬币</p><p>所以第一步先估算$$Z$$，这步同时是E-step</p><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=ZTM3MzY0YjcxMGMyMjc2NmU3YTIyMTkxYjM3YTFlNGNfb0w5WEkzWWxKM0ZZVFY0ak1VUGxUVHVRSWVSSkl4NXBfVG9rZW46UmQzU2JDT3N6b2tENmZ4M1VXSGNtSFQ5bnllXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><p>👆流程：</p><ol><li>随机初始化$$\theta_A=0.6$$和$$\theta_B=0.5$$(E-step)</li><li>H代表正面，T代表反面；对于第一轮来说，实际的情况是5个正的5个反的，进行如下计算<ol><li>$$P_A=\dfrac{0.6^5<em>0.4^5}{(0.6^5</em>0.4^5)+(0.5^5+0.5^5)}=0.45$$</li><li>$$P_B=\dfrac{(0.5^5+0.5^5)}{(0.6^5*0.4^5)+(0.5^5+0.5^5)}=0.55$$<ul><li><p>​    对于第一轮抛掷，该枚硬币是硬币A的概率为0.45，是硬币B的概率为0.55，其他轮同理，这一步得到了Z的概率分布</p></li><li><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=NGRmZWQwOTVjYjJiNDcxOGIxMDUzZGNhYzUyYTJlMGRfOUNOVm1LSVJFM0xQRjJDbHVHckNpM2M2cFRjVFdFcnFfVG9rZW46RG1TOGJibjlBb0RHenp4Qzc0b2MxczAwbjBjXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p></li></ul></li></ol></li><li>利用期望求硬币A和硬币B的贡献，对于第一轮来说<ol><li><p>H：0.45*5=2.25</p></li><li><p>T：0.55*5=2.75</p></li><li><p>其他轮同理</p></li><li><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=NTAzNzNmZjc0MGE5NjYyMWQ4NTUyNTlkYzI3NDAwOGZfS3Q4RnE5NGFHczdhbHY0WjRJNUZRRklyd0FiOFdtcmpfVG9rZW46U2puNmJ3ZTlFbzN0MWJ4TUs5ZmNSZXlBbkZmXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p></li><li><p>用极大似然估计来估计新的$$\theta_A$$和$$\theta_B$$，这步就是M-Step</p><ul><li>$$\theta_A=\dfrac{21.3}{21.3+8.6}=0.71$$</li><li>$$\theta_B=\dfrac{11.7}{11.7+8.4}=0.58$$</li></ul></li></ol></li><li>如此反复迭代，可以算出最终的参数值</li><li>$$L(\theta)$$与$$J(z,Q)$$的关系<ol><li><p>这张图的意思是</p></li><li><p>先固定$$\theta$$，调整$$Q(z)$$使下界$$J(z,Q)$$上升至与$$L(\theta)$$在该$$\theta$$值下相同(由绿线到蓝线)</p></li><li><p>然后固定$$Q(z)$$，调整$$\theta$$使下界$$J(z,Q)$$达到最大值</p></li><li><p>再固定$$\theta$$…</p></li><li><p>直到收敛到似然函数$$L(\theta)$$的最大值时，得到该处的$$\theta^{*}$$</p></li><li><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=YWNhYjE0NTBjYzU1ZTk5ZmI5ZjUwY2FhYzIyOTYzOGZfUjJqTkJOWGdpRVlBTWIxVE1VaFkwR2d6N0xKTFRrZzlfVG9rZW46UXI5R2I5andOb3pXM3B4WW1yV2N5TmN2blliXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p></li></ol></li><li>EM算法的整体框架</li></ol><p>Repeat until convergence{</p><p>  (E-step) For each </p><p>$$i$$</p><p>,set</p><p>​    $$Q_i(z):=p(z^{(i)}|x^{(i)};\theta)$$                            找隐变量的分布(直线往上移)</p><p>​     (M-step) Set</p><p>​    $$\theta:=arg max_{\theta}\sum_i\sum_{z^{(i)}}log\dfrac{p(x^{(i)},z^{(i)};\theta)}{Q_i(z^{(i)})}$$   找新的$$\theta$$(点位往左右移)</p><p>}</p><h4 id="4-2-3-2EM算法估计pLSA的两个未知参数"><a href="#4-2-3-2EM算法估计pLSA的两个未知参数" class="headerlink" title="4.2.3.2EM算法估计pLSA的两个未知参数"></a>4.2.3.2EM算法估计pLSA的两个未知参数</h4><p>从<strong>矩阵角度</strong>描述带估计的两个未知变量$$P(w_j|z_k)$$和$$P(z_k|d_i)$$</p><p>词表$$V$$有$$j$$个词项；所有主题$$Z$$有$$k$$个主题；有$$i$$篇文章</p><ul><li>假定用$$\phi_k$$表示词表$$V$$在主题$$z_k$$上的一个多项分布，则$$\phi_k$$可以表示成一个向量，每个元素$$\phi_{k,j}$$表示词项$$w_j$$出现在主题$$z_k$$中的概率，即：<ul><li>$$P(w_j|z_k)=\phi_{k,j}$$，$$\sum_{w_j\in V}\phi_{k,j}=1$$</li></ul></li><li>假定用$$\theta_i$$表示所有主题$$K$$在文档$$d_i$$上的一个多项分布，则$$\theta_i$$可以表示成一个向量，每个元素$$\theta_{i,k}$$表示主题$$z_k$$出现在文档$$d_i$$中的概率，即：<ul><li>$$P(z_k|d_i)=\theta_{i,k}$$，$$\sum_{z_k\in K}\theta_{i,k}=1$$</li></ul></li></ul><p>$$P(w_j|z_k)$$和$$P(z_k|d_i)$$转换成了两个矩阵，换言之，我们要求解的参数就是这两个矩阵：</p><ul><li>$$\Phi=[\phi_1,…\phi_K], z_k\in Z$$</li><li>$$\Theta=[\theta_i,…,\theta_M],d_i\in D$$</li></ul><p>词和词之间是相互独立的，整篇文档$$N$$个词的分布为：</p><ul><li>$$P(W|d_i)=\prod_{j=1}^NP(d_i,w_j)^{n(d_i,w_j)}$$</li></ul><p>文档和文档之间也是相互独立的，整个语料库($$M$$篇文档,每篇文档$$N$$个词)中词的分布为</p><ul><li>$$P(W|D)=\prod_{i=1}^M\prod_{j=1}^NP(d_i,w_j)^{n(d_i,w_j)}$$</li></ul><p>其中，</p><p>$$n(d_i,w_j)$$表示词项$$w_j$$在文档$$d_i$$中的词频</p><p>$$n(d_i)$$表示文档$$d_i$$中文档词的总数</p><p>显然有$$n(d_i)=\sum_{w_j\in V}n(d_i,w_j)$$，一篇文档中词的总数等于词表中每个词出现的次数之和</p><p>整个语料库的词分布的对数似然函数：</p><p>$$\begin{align} l(\Phi,\Theta)&amp;=\sum_{i=1}^{M}\sum_{j=1}^Nn(d_i,w_j)logP(d_i,w_j)\ &amp;=\sum_{i=1}^Mn(d_i)\left(logP(d_i)+\sum_{j=1}^N\dfrac{n(d_i,w_j)}{n(d_i)}log\sum_{k=1}^KP(w_j|z_k)P(z_k|d_i)\right)\ &amp;=\sum_{i=1}^Mn(d_i)\left(logP(d_i)+\sum_{j=1}^N\dfrac{n(d_i,w_j)}{n(d_i)}log\sum_{k=1}^K\phi_{k,j}\theta_{i,k}\right) \end{align}$$</p><ul><li>(1)对应的是$$L(\theta)\geq\sum_{i=1}^n\sum_z^ZQ_i(z)log\dfrac{P(x_i,z;\theta)}{Q_i(z)}$$，其中$$Q_i(z)$$表示的是样本$$i$$隐含变量$$z$$的某种分布；$$log\dfrac{P(x_i,z;\theta)}{Q_i(z)}$$表示的是对数似然函数</li><li>(2)分别求文本的对数似然函数和词的对数似然函数，见pdf</li><li>(3)就是上面得到的以矩阵的形式表达多项式分布</li></ul><p>多元函数在有约束条件$$\sum_{j=1}^{M}\theta_{k,j}=1$$和$$\sum_{k=1}^K\phi_{i,k}=1$$下求极值，用拉格朗日乘数法(即通过引入拉格朗日乘子将约束条件和多元(目标)函数融合到一起，转化为无约束条件的极值问题)见pdf</p><p>总结：</p><ol><li>为求得$$P(w_j|z_k)$$和$$P(z_k|d_i)$$，因此用EM算法去估计$$\theta=(P(w_j|z_k),z_k|d_i)$$这个参数</li><li>$$\phi_{k,j}$$表示词项$$w_j$$出现在主题$$z_k$$中的频率，即$$P(w_j|z_k)=\phi_{k,j}$$，从而把$$P(w_j|z_k)$$转换成矩阵$$\Phi$$</li><li>$$\theta_{i,k}$$表示主题$$z_k$$出现在文档$$d_i$$中的频率，即$$P(z_k|d_i)=\theta_{k,i}$$，从而把$$P(z_k|d_i)$$转换成矩阵$$\Theta$$</li><li>最后通过EM算法求出两个矩阵</li></ol><h5 id="4-2-3-2-1拉格朗日乘数法"><a href="#4-2-3-2-1拉格朗日乘数法" class="headerlink" title="4.2.3.2.1拉格朗日乘数法"></a>4.2.3.2.1拉格朗日乘数法</h5><ol><li>没有约束条件</li></ol><p>目标函数$$f(x,y)$$是一座山的高度，约束$$g(x,y)$$是镶嵌在山上的一条曲线，如下图</p><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=MTMwOTI0ZDhiOWRkMzJiODUxOGY1ZDY1OTYyMzdiZmJfTVcyWmNhRFBTZmhoSVRCTVFKUmVQRDlpY3g5M1oyQk5fVG9rZW46TzJydmJVWEowb0I5aUV4VVRtbGNsaFFzblZoXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><p>红线是约束曲线</p><p>目的：找红线上的最低点</p><p>步骤：</p><ul><li>从第0条线开始往上数，数到第三条，与约束曲线有交点，比第三条低的地方都不在约束范围内，所以这是约束曲线的最低点</li><li>约束曲线不会和等高线相交，一定是相切，如果是相交的话，约束曲线有一部分在最低点的曲线的下端(即目标曲线并不能包括约束曲线的最低点)，如下图中约束曲线有一部分在B区域，但是B区域比等高线低<ul><li><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=MmJhNGExNjkwMWU5ODlkN2UwZDk2YjE0YmMyZTUzOWRfSDBWbkZvMTgwM1lrclRrUnEwaEd6TWRWRkhtWDhTbkdfVG9rZW46RkM2WWI1ekZXb1Q3VDZ4dWtVRGNNN1J2bmpjXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></li></ul></li><li>那么两条线只能相切，意味他们的法线平行&lt;==&gt;法向量只差一个任意的常数乘子(取-$$\lambda$$)：<ul><li><p>∇$$f(x,y)=-\lambda$$∇$$g(x,y)$$</p></li><li><p>∇$$f(x,y)+\lambda$$∇$$g(x,y)=0$$</p></li></ul></li></ul><ol><li><a href="https://zhuanlan.zhihu.com/p/55532322">有约束条件</a></li></ol><p>见pdf</p><h2 id="4-3LDA模型"><a href="#4-3LDA模型" class="headerlink" title="4.3LDA模型"></a>4.3LDA模型</h2><h3 id="4-3-1pLSA和LDA的对比：生成文档与参数估计"><a href="#4-3-1pLSA和LDA的对比：生成文档与参数估计" class="headerlink" title="4.3.1pLSA和LDA的对比：生成文档与参数估计"></a>4.3.1pLSA和LDA的对比：生成文档与参数估计</h3><p>👇频率派vs贝叶斯派</p><p>This content is only supported in a Feishu Docs</p><p><strong>LDA</strong>模型中一篇文档生成的方式：</p><ol><li>按照先验分布$$P(d_i)$$选择一篇文档$$d_i$$</li><li>从Dirichlet分布$$\alpha$$中取样生成文档$$d_i$$的主题分布$$\theta_i$$，即主题分布$$\theta_i$$由超参数为$$\alpha$$的Dirichlet分布生成①</li><li>从主题的多项式分布$$\theta_i$$中取样生成文档$$d_i$$第$$j$$个词的主题$$z_{i,j}$$</li><li>从Dirichlet分布$$\beta$$中取样生成主题$$z_{i,j}$$对应的词语分布$$\phi_{z_i,j}$$，即词语分布$$\phi_{z_i,j}$$由参数为$$\beta$$的Dirichlet分布生成②</li><li>从词语的多项式分$$\phi_{z_i,j}$$中采样最终生成词语$$w_{i,j}$$</li></ol><p>👇LDA和pLSA的区别：</p><ul><li>LDA是pLSA的贝叶斯版本，主题分布和词分布本身都由先验知识随机给定</li><li>①②LDA在pLSA的基础上为主题分布和词分布加了两个Dirichlet先验分布$$\alpha$$和$$\beta$$</li><li><strong>pLSA</strong>中主题分布和词分布是唯一确定的，但是<strong>LDA</strong>中主题分布和词分布不再唯一确定不变，即无法确切给出，但是再怎么变化也依然服从一定的分布，即主题分布和词分布由Dirichlet先验随机确定</li><li>文本生成后，两者都要根据文档去推断主题分布和词分布，只是用的参数推断方法不同<ul><li>pLSA中用极大似然估计的思想</li><li>LDA中把两个参数视为随机变量，加入Dirichlet先验</li></ul></li><li>pLSA属于频率派思想，样本随机，参数($$\theta_{k,j}$$和$$\phi_{i,j}$$)虽未知但固定；LDA属于贝叶斯派思想，样本固定，参数($$\theta_i$$和$$\phi_{z_i,j}$$)未知但不固定，是个随机变量，服从一定的分布(Dirichlet分布)<ul><li><strong>pLSA中</strong><ul><li>主题分布和词分布确定后，以一定概率$$\left(P(z_k|d_i),P(w_j|z_k)\right)$$分别选取具体的主题和词项，生成好文档</li><li>然后根据生成好的文档反推其主题分布、词分布</li><li>最终用EM算法求解出两个未知但固定的参数的值：<ul><li>$$\phi_{k,j}$$(由$$P(w_j|z_k)$$转换而来)</li><li>$$\theta_{i,k}$$(由$$P(z_k|d_i)$$转换而来)</li><li><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmZmM2I5NTIwMDVmMDAwZTFiNDI0ZGZkODg1YjlkNDJfc0ZneU15SGowRW1yRDRleDRLUXd4RFV6Q1Q3OWpja2JfVG9rZW46TWFudGJ1S2Q5b3VCNW94MndUeGNUU0pCblVkXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></li></ul></li></ul></li><li><strong>LDA****中</strong><ul><li>主题分布和词分布是随机变量(即文档$$d_i$$产生主题$$z_k$$和主题$$z_k$$产生词项$$w_j$$的概率都是随机变量)</li><li>Dirichlet先验为文档$$d_i$$生成主题分布$$\Theta$$，然后根据主题分布$$\Theta$$产生主题$$z_k$$</li><li>从无穷多个主题分布中按照Dirichlet先验随机抽取出某个主题分布出来</li><li><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=YzgwODJiZjFlYWUzNTQ0N2YxMGJiM2ViMjZlMTU3YmNfZHlCY1NXOE5ObWxsdDFoajBPS1dnU3FWRTZJdklHbGJfVG9rZW46V3hma2IzRnRobzI1TXJ4bkVYUGNtR2g4blFkXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></li></ul></li></ul></li><li>例子<ul><li>好比，去一朋友家：<ul><li>按照<strong>频率派</strong>的思想，我估计他在家的概率是1/2，不在家的概率也是1/2，是个<strong>定值</strong>。</li><li>而按照贝叶斯派的思想，他在家不在家的概率不再认为是个定值1/2，而是随机变量。比如按照我们的经验（比如当天周末），猜测他在家的概率是0.6，但这个0.6不是说就是完全确定的，也有可能是0.7。如此，贝叶斯派没法确切给出参数的确定值（0.3,0.4，0.6,0.7，0.8,0.9都有可能），但至少明白在哪个范围或哪些取值（0.6,0.7，0.8,0.9）更有可能，哪个范围或哪些取值（0.3,0.4） 不太可能。进一步，贝叶斯估计中，参数的多个估计值服从一定的先验分布，而后根据实践获得的数据（例如周末不断跑他家），不断修正之前的参数估计，从先验分布慢慢过渡到后验分布。</li></ul></li></ul></li></ul><h3 id="4-3-2LDA生成文档–三维坐标系"><a href="#4-3-2LDA生成文档–三维坐标系" class="headerlink" title="4.3.2LDA生成文档–三维坐标系"></a>4.3.2LDA生成文档–三维坐标系</h3><p><a href="https://blog.csdn.net/v_JULY_v/article/details/41209515?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&amp;utm_relevant_index=2">看</a></p><h3 id="4-3-3pLSA和LDA概率图对比"><a href="#4-3-3pLSA和LDA概率图对比" class="headerlink" title="4.3.3pLSA和LDA概率图对比"></a>4.3.3pLSA和LDA概率图对比</h3><p>z跟w都得是小写，阴影圆圈表示可观测的变量，非阴影圆圈表示隐变量或参数，箭头表示两变量间的条件依赖性，方框表示重复抽样，方框右下角的数字代表重复抽样的次数</p><ul><li>pLSA<ul><li><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=MTA5OGI5MTU5OWMyZTk3ZGY2MDJmYmEwYmQ3NWE3MjVfVk80STExMjAxQlpSZ0FiVDhSdExUVU5uYUQwZjgyV0dfVG9rZW46S29FQWJhTG9Sb3ZJZFh4RnN4M2NNS2p6bmZWXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></li></ul></li><li>LDA <ul><li><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=Mzk4MDRmYTNmNDY1Y2FlODQ4NGY1NzNmMzE3ZjQ0ODZfNWx2azF5cm5LTjd0c3dxSU45WVlZSzU3NTYwRGg3NHRfVG9rZW46STBtZGI5WjE4b1JmenZ4RjVJMGNrR2xhblJiXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p></li><li><p>假定语料库中共有M篇文章，每篇文章下的Topic的主题分布是一个从参数为$$\alpha$$的Dirichlet先验分布中采样得到的Multinomial分布，每个Topic下的词分布是一个从参数$$\beta$$为的Dirichlet先验分布中采样得到的Multinomial分布。</p></li><li><p>对于某篇文章中的第n个词，首先从该文章中出现的每个主题的Multinomial分布中选择或采样一个主题，然后再在这个主题对应的词的Multinomial分布中选择或采样一个词。不断重复这个随机生成过程，直到M篇文章全部生成完成。</p></li><li><p>M 篇文档会对应于 M 个独立的 Dirichlet-Multinomial 共轭结构，K 个 topic 会对应于 K 个独立的 Dirichlet-Multinomial 共轭结构</p><ul><li>$$\alpha\rightarrow\theta\rightarrow z$$表示生成文档中的所有词对应的主题<ul><li>$$\alpha\rightarrow\theta$$对应的是Dirichlet分布</li><li>$$\theta\rightarrow z$$对应的是Multinomial分布</li><li>​      因此整体是一个Dirichlet-Multinomial共轭结构</li></ul></li><li>$$\beta\rightarrow\theta\rightarrow w$$表示某个主题对应的词<ul><li>同上</li></ul></li></ul></li></ul></li></ul><h3 id="4-3-4pLSA和LDA参数估计方法的对比"><a href="#4-3-4pLSA和LDA参数估计方法的对比" class="headerlink" title="4.3.4pLSA和LDA参数估计方法的对比"></a>4.3.4pLSA和LDA参数估计方法的对比</h3><ul><li>pLSA<ul><li>使用EM算法估计$$\Phi$$和$$\Theta$$，使用的思想是极大似然估计</li></ul></li><li>LDA<ul><li>估计$$\Phi$$和$$\Theta$$可用变分(Variational inference)-EM算法<strong>，</strong>也可以用gibbs采样<strong>，</strong>前者的思想是最大后验估计MAP（MAP与MLE类似，都把未知参数当作固定的值），后者的思想是贝叶斯估计</li></ul></li></ul><h3 id="4-3-5Gibbs采样"><a href="#4-3-5Gibbs采样" class="headerlink" title="4.3.5Gibbs采样"></a>4.3.5Gibbs采样</h3><p>Gibbs抽样是马尔可夫链蒙特卡尔理论（MCMC）中用来获取一系列近似等于指定多维概率分布（比如2个或者多个随机变量的联合概率分布）观察样本的算法。</p><h1 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5.代码实现"></a>5.代码实现</h1><p>This content is only supported in a Feishu Docs</p><h2 id="5-1corpora-Dictionary-texts"><a href="#5-1corpora-Dictionary-texts" class="headerlink" title="5.1corpora.Dictionary(texts):"></a>5.1<strong>corpora.Dictionary(texts)</strong>:</h2><p>为每个出现在语料库中的单词分配了一个独一无二的编号id</p><h2 id="5-2dictionary-doc2bow"><a href="#5-2dictionary-doc2bow" class="headerlink" title="5.2dictionary.doc2bow():"></a>5.2<strong>dictionary.doc2bow()</strong>:</h2><p>把文档变成一个稀疏向量，[(0,1), (1,1)]，表明id为0，1的词汇出现了一次，而其他词汇没有出现</p><h2 id="5-3models-Ldamodel"><a href="#5-3models-Ldamodel" class="headerlink" title="5.3models.Ldamodel:"></a>5.3<strong>models.Ldamodel</strong>:</h2><p><strong>参数：</strong></p><p>corpus：一组文档的语料库，是list of list of tuple的形式，每个list内的元素是(word_id, count)，表示一个文档中每个词出现的次数</p><p>num_topics：主题数量</p><p>id2word：将每个词的id映射到该词的字符串表示</p><p>passes：在拟合模型中要执行的迭代次数</p><p>random_state：随机数生成器的种子</p><h2 id="5-4ldamodel-show-topics"><a href="#5-4ldamodel-show-topics" class="headerlink" title="5.4ldamodel.show_topics"></a>5.4ldamodel.show_topics</h2><p>用于展示LDA模型的主题函数</p><h3 id="5-4-1x"><a href="#5-4-1x" class="headerlink" title="5.4.1x"></a>5.4.1x</h3><p>格式：</p><p>[</p><p>(主题1，[(关键词1.1，概率1.1),(关键词1.2，概率1.2)…])，</p><p>(主题2，[(关键词2.1，概率2.1),(关键词2.2，概率2.2)…])，</p><p>()，</p><p>….]</p><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=NmRmY2QzNWM1MTFmYWM3OTk2YWJmZDFkZTFjZTdmZmRfc080bTB6YlBKeEQ2VjdjZ3l3N0VyQTN2dDhZM1lTSUVfVG9rZW46SmtmY2JxWHRSbzBOczN4WVJ6RmM1NERLbnRjXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><h3 id="5-4-2tp"><a href="#5-4-2tp" class="headerlink" title="5.4.2tp"></a>5.4.2tp</h3><p>tp[0]–&gt;主题</p><p>tp[1]–&gt;[(关键词1，概率1),(关键词2，概率2)…]</p><h3 id="5-4-3打印每个主题下每个单词的概率"><a href="#5-4-3打印每个主题下每个单词的概率" class="headerlink" title="5.4.3打印每个主题下每个单词的概率"></a>5.4.3打印每个主题下每个单词的概率</h3><p>This content is only supported in a Feishu Docs</p><p>👇用.split()函数</p><ul><li>先按照”+”号进行拆分</li><li>然后对于以”+”号拆分出来的东西，再以”*”号进行拆分</li><li>打印格式：”单词”(单词出现的概率)</li></ul><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGQ2NTAzNTA0OTc3Mjc0OGNmZDBlN2UwY2NlOTYzMzVfRnM5RHRNRGpLMHpweU5ZTTA3bm5USzZSQ3RnZDBRMDBfVG9rZW46U3VUVGJGaFI5b1BCcDN4ZFkxQ2NMRXVSbjNnXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><h3 id="5-4-4计算一致性"><a href="#5-4-4计算一致性" class="headerlink" title="5.4.4计算一致性"></a>5.4.4计算一致性</h3><p><strong>CoherenceModel(model, texts, dictionary, coherence)</strong></p><p>model：指定用于计算一致性的主题模型对象(ldamodel)</p><p>text：指定一个文本列表</p><p>dictionary：指定一个词典对象</p><p>coherence：指定要计算的一致性指标</p><ul><li>C_V：衡量主题内部的一致性和主题之间的互异性</li></ul><p>返回的是一致性评分，分数越高，表示主题模型的主题更具有一致性，一致性评分仅用于比较不同主题模型之间的一致性</p><p>This content is only supported in a Feishu Docs</p><p>发现，当主题数目为10的时候，十个不同的主题之间的coherence值较大，一致性较高。这四个主题下的关键词能够很好地概括所有文档的关键词</p><h1 id="6-没懂的地方"><a href="#6-没懂的地方" class="headerlink" title="6.没懂的地方"></a>6.没懂的地方</h1><ol><li>第四行到第五行</li></ol><p><img src="https://oa7vrw2neqh.feishu.cn/space/api/box/stream/download/asynccode/?code=YmNmYjVmYjU0MjZmNGU5MTI4YzVmZTM5OTg0MWRiYTVfQ0pCQWxKM1c3ZzczU3o4MGRqQW55aENYeUhmd05kSXVfVG9rZW46SGI4M2JSOTlob1FuTEN4YVhNRWNCQm9Pbk5lXzE2OTA0NjAwNjY6MTY5MDQ2MzY2Nl9WNA" alt="img"></p><p>$$\newcommand{\sigmoid}{\text{sigmoid}}$$</p><p>$$\sigmoid(x)$$</p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DMIR考核 </tag>
            
            <tag> NLP </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> LDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坟————DMIR考核仓库</title>
      <link href="/2023/05/02/ru-fen-dmir-kao-he/"/>
      <url>/2023/05/02/ru-fen-dmir-kao-he/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Wabbybabb0/DMIR_assessment">考核内容及提交</a></p>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DMIR考核 </tag>
            
            <tag> NLP </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忙碌的五月————考核，比赛与病痛</title>
      <link href="/2023/05/01/2023.5-yue-zong-jie/"/>
      <url>/2023/05/01/2023.5-yue-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li>在五一劳动节发布的考核题(为期一个月)</li><li>4月29到5月7的数模校赛</li><li>5月4到5月10🐏了</li><li>5月13焊接比赛</li><li>剩下的时间补之前的课内和开始做DMIR考核**(浓缩的不是精华，是寿命T^T)**</li></ul>]]></content>
      
      
      <categories>
          
          <category> 月总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坟————QG工作室训练营————大组作业仓库</title>
      <link href="/2023/03/25/ru-fen-qg-kao-he-zhi-da-zu-zuo-ye/"/>
      <url>/2023/03/25/ru-fen-qg-kao-he-zhi-da-zu-zuo-ye/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Wabbybabb0/QG_big_group">WB-QG大组作业仓库</a></p><p>weekday上课对于我来说就是放假啊</p><p>周五晚上师兄师姐布置完作业，周日晚上23:59:59就要交了</p><p>谁跟我说上了大学就轻松的(<strong>送你一锤!</strong>)</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> QG考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坟————QG工作室训练营————小组作业仓库</title>
      <link href="/2023/03/25/ru-fen-qg-kao-he-zhi-xiao-zu-zuo-ye/"/>
      <url>/2023/03/25/ru-fen-qg-kao-he-zhi-xiao-zu-zuo-ye/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/Wabbybabb0/QG_small_group">WB-QG小组作业仓库</a></p><p>没逝就好</p><p>记录一下中期考核时间2023_04_02—2023_04_10</p><p>没做最终考核是因为跑路想去另一个团队了</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
            <tag> QG考核 </tag>
            
            <tag> 波士顿房价预测 </tag>
            
            <tag> 多智能体共识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————文件</title>
      <link href="/2023/02/10/xiao-bai-wen-jian/"/>
      <url>/2023/02/10/xiao-bai-wen-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="一-文件的当前位置指针"><a href="#一-文件的当前位置指针" class="headerlink" title="一.文件的当前位置指针"></a>一.文件的当前位置指针</h3><p>文件结构类型<strong>FILE</strong></p><p>其中FILE(结构体)包含</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>ptr</strong>表示当前的位置指针，指向当前的读写位置</p><h3 id="二-跟踪文件的当前位置指针"><a href="#二-跟踪文件的当前位置指针" class="headerlink" title="二.跟踪文件的当前位置指针"></a>二.跟踪文件的当前位置指针</h3><h4 id="ftell函数"><a href="#ftell函数" class="headerlink" title="ftell函数"></a>ftell函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果操作成功，返回filepointer文件地当前位置指针，<code>即相对于文件开头的位移量(字节数)</code></p><p>否则返回-1L</p><h4 id="feof函数"><a href="#feof函数" class="headerlink" title="feof函数"></a>feof函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">feof</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试filepointer文件地位置指针是否指向文件的末尾</p><p>如果filepointer文件的位置指针已指向文件的末尾，则返回逻辑真，否则返回逻辑假</p><h3 id="三-定位文件的当前位置指针"><a href="#三-定位文件的当前位置指针" class="headerlink" title="三.定位文件的当前位置指针"></a>三.定位文件的当前位置指针</h3><h4 id="rewind函数"><a href="#rewind函数" class="headerlink" title="rewind函数"></a>rewind函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>rewind函数将filepointer文件的当前位置指针强行定位到文件的开头</p><h4 id="fseek函数"><a href="#fseek函数" class="headerlink" title="fseek函数"></a>fseek函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">,</span> <span class="token keyword">long</span> offest<span class="token punctuation">,</span> <span class="token keyword">int</span> origin<span class="token punctuation">)</span><span class="token comment">//filepointer是文件指针</span><span class="token comment">/***offset是偏移量，类型为long int文件开头------SEEK_SET--0文件当前位置---SEEK_CUR--1文件末尾------SEEK_END--2//origin是起始位置，类型为int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fseek将filepointer文件的当前位置指针移动到<code>距离origin的offset位置处</code></p><p>offset&gt;0，表示新位置在origin后，反之亦然</p><p>若操作成功则返回0，否则返回非0</p><h3 id="四-文件的打开与关闭"><a href="#四-文件的打开与关闭" class="headerlink" title="四.文件的打开与关闭"></a>四.文件的打开与关闭</h3><h4 id="fopen-函数"><a href="#fopen-函数" class="headerlink" title="fopen()函数"></a>fopen()函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//filename是要打开的文件名，文件名前可以带路径</span><span class="token comment">//mode是打开方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果文件打开成功，则返回指向该文件的指针</p><p>如果文件打开失败，则返回空指针NULL</p><p>e.g.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"f1.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//推荐写法</span><span class="token comment">//r:文件一定要已存在</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"c:\\aaa\\f1.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不推荐写法</span><span class="token comment">//w+:若文件不存在则创建文件，可读可写</span><span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"file\\f1.txt"</span><span class="token punctuation">;</span><span class="token comment">//存储到当前目录的file子目录下</span>fp <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a+:若文件不存在则创建文件，可读可写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="fclose-函数"><a href="#fclose-函数" class="headerlink" title="fclose()函数"></a>fclose()函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果正常关闭，返回0，否则返回非0</p><h3 id="五-文件读写"><a href="#五-文件读写" class="headerlink" title="五.文件读写"></a>五.文件读写</h3><h4 id="fgetc函数—字符方式文件读写"><a href="#fgetc函数—字符方式文件读写" class="headerlink" title="fgetc函数—字符方式文件读写"></a>fgetc函数—字符方式文件读写</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fgetc从filepointer文件的<code>当前位置</code>读出一个字符，同时将文件的<code>位置指针_ptr</code>后移一个字节。读出的字节一般要保存到一个字符型变量中</p><p>如果读取成功，返回<strong>读取的字节值</strong>；</p><p>如果读到文件尾或出错，返回<strong>EOF</strong></p><h4 id="fgets函数—字符串方式文件读写"><a href="#fgets函数—字符串方式文件读写" class="headerlink" title="fgets函数—字符串方式文件读写"></a>fgets函数—字符串方式文件读写</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*str是读出的字符串要存放的地方</span><span class="token comment">//n:读取长度为n-1，在末尾加上'\0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读取成功，返回指向字符串的指针</p><p>失败或出错，返回NULL</p><h4 id="fprintf函数和fscanf函数—格式化读取"><a href="#fprintf函数和fscanf函数—格式化读取" class="headerlink" title="fprintf函数和fscanf函数—格式化读取"></a>fprintf函数和fscanf函数—格式化读取</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">[</span><span class="token punctuation">,</span>adress<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>filepointer<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">[</span><span class="token punctuation">,</span>adress<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>e.g.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">;</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从文件中读取</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">float</span> y <span class="token operator">=</span><span class="token number">5.8</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%d,%6.2f"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写入文件中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>失败返回EOF</p><h4 id="fwrite函数和fread函数—二进制方式文件读写"><a href="#fwrite函数和fread函数—二进制方式文件读写" class="headerlink" title="fwrite函数和fread函数—二进制方式文件读写"></a>fwrite函数和fread函数—二进制方式文件读写</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">unsigned</span> size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> FILE <span class="token operator">*</span>filepointer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ptr:数据存储位置</span><span class="token comment">//size:数据所占字节数</span><span class="token comment">//n:写入n个数据</span><span class="token comment">//filepointer:向这个文件写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fread同理</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 闲着没事干 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————万年历</title>
      <link href="/2023/02/08/xiao-bai-wan-nian-li/"/>
      <url>/2023/02/08/xiao-bai-wan-nian-li/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">printMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printMonthBody</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getStartDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getTotalNumOfDays</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getNumOfDaysInMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> month<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要查询的年份：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要查询的月份：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d年%d月份的日历\n"</span><span class="token punctuation">,</span>year<span class="token punctuation">,</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"日\t一\t二\t三\t四\t五\t六\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printMonthBody</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printMonthBody</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> week <span class="token operator">=</span> <span class="token function">getStartDay</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> days <span class="token operator">=</span> <span class="token function">getNumOfDaysInMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> circulation <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//第一行的日期</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> week <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  \t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> week<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> date<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从第二行开始的日期</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> date<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> days<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>circulation <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>circulation <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>circulation<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getStartDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> week<span class="token punctuation">;</span>week <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTotalNumOfDays</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>week <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> week<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getTotalNumOfDays</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> yearChange <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token keyword">int</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> daysOfYear<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1800</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>yearChange<span class="token punctuation">)</span><span class="token punctuation">)</span>daysOfYear <span class="token operator">=</span> <span class="token number">366</span><span class="token punctuation">;</span><span class="token keyword">else</span>daysOfYear <span class="token operator">=</span> <span class="token number">365</span><span class="token punctuation">;</span>sum1 <span class="token operator">+=</span> daysOfYear<span class="token punctuation">;</span>yearChange<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>sum2 <span class="token operator">+=</span> <span class="token function">getNumOfDaysInMonth</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> sum1 <span class="token operator">+</span> sum2<span class="token punctuation">;</span><span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getNumOfDaysInMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">5</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">10</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">||</span> month <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> <span class="token number">28</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>bool <span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 闲着没事干 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————排序</title>
      <link href="/2023/02/07/xiao-bai-pai-xu/"/>
      <url>/2023/02/07/xiao-bai-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h3 id="一-冒泡排序bubbleSort"><a href="#一-冒泡排序bubbleSort" class="headerlink" title="一.冒泡排序bubbleSort"></a>一.冒泡排序bubbleSort</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-选择排序"><a href="#二-选择排序" class="headerlink" title="二.选择排序"></a>二.选择排序</h3><p>每次把最小的找出来跟第一个数值换位置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> min<span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>min <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>min <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-快速排序"><a href="#三-快速排序" class="headerlink" title="三.快速排序"></a>三.快速排序</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pos<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>pos <span class="token operator">=</span> <span class="token function">findPos</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low <span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> val <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> val<span class="token punctuation">)</span><span class="token operator">--</span>high<span class="token punctuation">;</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> val<span class="token punctuation">)</span><span class="token operator">++</span>low<span class="token punctuation">;</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四-插入排序-二分法"><a href="#四-插入排序-二分法" class="headerlink" title="四.插入排序+二分法"></a>四.插入排序+二分法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span>mid<span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>high <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> high <span class="token operator">!=</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> mid <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">==</span> low<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 闲着没事干 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————FirstGame笔记</title>
      <link href="/2023/01/21/ru-men-firtgame/"/>
      <url>/2023/01/21/ru-men-firtgame/</url>
      
        <content type="html"><![CDATA[<h4 id="Input-GetAxis"><a href="#Input-GetAxis" class="headerlink" title="Input.GetAxis"></a>Input.GetAxis</h4><p>GetAxis()两种：</p><ul><li><p>Vertical:获得垂直方向</p></li><li><p>Horizontal:获得水平方向</p></li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">horizontalmove = Input.GetAxis("Horizontal");//检测水平方向键verticalmove = Input.GetAxis("Vertical"); //检测垂直方向键<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/Unity/1.png"></p><p>👆Edit-&gt;Project Settings-&gt;Input Manager-&gt;Axes-&gt;Horizontal</p><p>从上图可知<code>Negative Button</code> <code>-1</code>对应<code>left</code>和<code>a</code>；<code>Positive Button</code>对应<code>1</code>和<code>right</code></p><p>所以在程序中分别设置两个变量接收<code>-1</code>或者<code>1</code>来判断是按了<code>a</code> <code>left</code>还是<code>d</code> <code>right</code></p><h4 id="Input-GetAxisRaw"><a href="#Input-GetAxisRaw" class="headerlink" title="Input.GetAxisRaw"></a>Input.GetAxisRaw</h4><p><strong>~ vs Input.GetAxis</strong>👇</p><p>前者获得的数据只有<code>-1</code> <code>0</code> <code>1</code></p><p>后者获得的数据是<code>-1~0</code> <code>0~1</code></p><h4 id="Time-deltaTime"><a href="#Time-deltaTime" class="headerlink" title="Time.deltaTime"></a>Time.deltaTime</h4><p><img src="/../../../../medias/blog_picture/Unity/2.png"></p><p><img src="/../../../../medias/blog_picture/Unity/3.png"></p><h4 id="Mathf-Abs"><a href="#Mathf-Abs" class="headerlink" title="Mathf.Abs()"></a>Mathf.Abs()</h4><p>取绝对值</p><h4 id="transform-Transform"><a href="#transform-Transform" class="headerlink" title="transform&amp;Transform"></a>transform&amp;Transform</h4><ul><li>Transform做函数</li><li>transform才是当前真正需要操作的</li></ul><h4 id="镜头设置的两种方法"><a href="#镜头设置的两种方法" class="headerlink" title="镜头设置的两种方法"></a>镜头设置的两种方法</h4><h5 id="1-在Main-Camera中加new-script"><a href="#1-在Main-Camera中加new-script" class="headerlink" title="1.在Main Camera中加new script"></a>1.在Main Camera中加new script</h5><p>👇Script代码</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class CameraControl : MonoBehaviour{//①设置一个叫"player"的Transform类型的变量    public Transform player;    // Update is called once per frame    void Update()    {    //②把Main Camera中的transform栏目中的position改为一个实例，该实例是3D的，xyz各自对应        transform.position = new Vector3(player.position.x, 0, -10f);      }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👇最后把要给镜头的对象移动到Player处即可</p><p><img src="/../../../../medias/blog_picture/Unity/4.png"></p><h5 id="2-cinimachine"><a href="#2-cinimachine" class="headerlink" title="2.cinimachine"></a>2.cinimachine</h5><p>GameObject-&gt;Cinimachine-&gt;2D Cinima-&gt;得到下图所示的选项</p><p><img src="/../../../../medias/blog_picture/Unity/5.png"></p><p><img src="/../../../../medias/blog_picture/Unity/6.png"></p><ul><li><p>Follow处拉拽上需要跟踪镜头的对象</p></li><li><p>然后在Lens处调整镜头距离等参数</p></li></ul><p><img src="/../../../../medias/blog_picture/Unity/7.png"></p><ul><li><p>Dead Zone</p><ul><li>可以拉拽范围，如果超出范围则镜头移动，未超出则不移动</li></ul></li><li><p>不离开背景图</p><ul><li>CM vcam1-&gt;Body-&gt;Add Extension-&gt;Cinimachine Confiner-&gt;</li><li><img src="/../../../../medias/blog_picture/Unity/8.png"></li></ul></li><li><p>回到Background图层拉拽范围</p></li></ul><h4 id="虚函数与类的使用"><a href="#虚函数与类的使用" class="headerlink" title="虚函数与类的使用"></a>虚函数与类的使用</h4><p><strong>父级</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Enemy : MonoBehaviour{    protected Animator Anim;    //👆所有Enemy都需要有“被击杀”的动画，因此先创建一个名为"Anim"的Animator变量    //"protected"→1.1    protected virtual void Start()    //"virtual"父级的"Start"是可以被子级重新编写的(因为子级在"Start"中有一些本体的属性)    {        Anim = GetComponent&lt;Animator&gt;();    }    public void Death()    {        Destroy(gameObject);    }    public void JumpOn()    {        Anim.SetTrigger("death");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子级</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Enemy_Frog : Enemy//隶属于Enemy的子级，确定父子关系{protected override void Start()//👆override 呼应virtual{     base.Start();//调用父级的Start}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Player</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Enemy enemy = collision.gameObject.GetComponent&lt;Enemy&gt;();//可以调用名为"Enemy"的类的父子级<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-1protected"><a href="#1-1protected" class="headerlink" title="1.1protected"></a>1.1protected</h5><ul><li><p>自身类和派生类可以访问相当于自身的private型成员 <code>创建的函数或者变量在子父级中都可以使用</code></p></li><li><p>可以被<code>1.该类中的函数</code>、<code>2.子类的函数</code>、以及<code>3.其友元函数</code>访问。但不能被该类的对象访问</p></li><li><p>使用protected继承，父类的protected和public属性在子类中变为protected</p></li></ul><h4 id="场景转换"><a href="#场景转换" class="headerlink" title="场景转换"></a>场景转换</h4><p>从第一关进入第二关</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">using UnityEngine.SceneManagement;//.//.if(Input.GetKeyDown(KeyCode.E)){    SceneManager.LoadScene(SceneManager.GetActiveScene().bulidIndex + 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小白————操作符</title>
      <link href="/2023/01/13/xiao-bai-cao-zuo-fu/"/>
      <url>/2023/01/13/xiao-bai-cao-zuo-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="一-操作符"><a href="#一-操作符" class="headerlink" title="一.操作符"></a>一.操作符</h2><p><strong>操作符函数是方法函数的简记法</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace CreatOperator{    class Program    {        static void Main(string[] args)        {            Person person1 = new Person();            Person person2 = new Person();            person1.Name = "Deer";            person2.Name = "Deer's wife";            List&lt;Person&gt; nation = Person.GetMarry(person1,person2);            //上面这行改成            //List&lt;Person&gt; nation = person1 + person2;            foreach (var p in nation)            {                Console.WriteLine(p.Name);            }        }    }        class Person    {        public string Name;        public static List&lt;Person&gt;GetMarry(Person p1,Person p2)        //上面这行改成 public static List&lt;Person&gt; operator+(Person p1,Person p2)        {            List&lt;Person&gt; people = new List&lt;Person&gt;();            people.Add(p1);            people.Add(p2);            for (int i = 0; i &lt; 11; i++)            {                Person child = new Person();                child.Name = p1.Name + "&amp;" + p2.Name + "s child";                people.Add(child);            }            return people;        }    }}//两种方法的结果一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有圆括号来提高优先级</p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int[] myIntArray = new int[]{};//[]填数组大小，{}(初始化器)填具体数值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Type t = typeof(int);Console.WriteLine(t.Namespace);Console.WriteLine(t.FullName);Console.WriteLine(t.Name);/**SystemSystem.Int32Int32*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>获取一个类型的默认值</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int x = default(int);Console.WriteLine(x);//0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Form myForm = default(Form);Console.WriteLine(myForm==null);//true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Program{static void Main(string[] args)    {        Level level = default(Level);        Console.WriteLine(level);    }}//①enum Level{Low,Mid,High}//Low//②enum Level{Mid,Low,High}//Mid//③enum Level{Mid = 1,Low = 0,High = 2}//Low//④enum Level{Low = 1,Mid = 2,High = 3}//0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="var"><a href="#var" class="headerlink" title="var"></a>var</h4><p>声明隐式类型变量</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int x = 100;//显式var y = 100;//隐式根据赋的值“100”来给y判断类型Console.WriteLine(y.GetType().Name);//Int32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><ul><li>调用实例构造器</li></ul><p>帮助我们在内存当中<code>创建类型的实例</code></p><p>有<code>()</code>时表示<code>调用它的实例构造器</code></p><p>如果在new操作符<code>左边有赋值符号</code>的话，那么new操作符会把自己拿到的这个<code>实例的内存地址</code>通过<code>赋值操作符</code>交给负责访问这个实例的<code>变量</code></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Form myForm = new Form();//myForm为该实例的变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>调用实例的初始化器</li></ul><p>花括号<code>{}</code>内可以为这个实例的属性设置它的值，可以通过<code>,</code>来同时设置多个属</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Form myForm = new Form(){Text."Hello"};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>👆👇</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Form myForm = new Form();myForm.Text = "Hello"; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>一次性访问，没必要创建变量访问实例</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">new Form(){Text = "Hello"}.ShowDialog();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>👆👇</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Form myForm = new Form();myForm.Text = "Hello";myForm.ShowDialog();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>匿名类型创建对象</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">var person = new{Name = "Mr.Okay", Age = 18};//自动判断类型Console.WriteLine(person.Age);Console.WriteLine(person.Name);Console.WriteLine(person.GetType().Name);//Mr.Okay//18//&lt;&gt;f__AnonymousType0`2//类型的解释：//&lt;&gt;f__AnonymousType是约定的一个前缀//0指的是在程序中创建的第一个//`2指的是这个类型是一个泛型类，构成这个类型时需要两个类型来构成它，一个是string，一个是int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子类隐藏父类(关键字)(了解即可)</li></ul><h4 id="checked-unchecked"><a href="#checked-unchecked" class="headerlink" title="checked&amp;unchecked"></a>checked&amp;unchecked</h4><p>检查是否异常</p><h4 id="取非操作符"><a href="#取非操作符" class="headerlink" title="!取非操作符"></a>!取非操作符</h4><p>实际应用，检查</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace CreatOperator{    class Program    {        static void Main(string[] args)        {            Student stu = new Student(null);            Console.WriteLine(stu.Name);        }    }    class Student    {        public string Name;        public Student(string initName)        {            if(!string.IsNullOrEmpty(initName))            {                this.Name = initName;            }            else             {                throw new ArgumentException("initName cannot be null or empty");            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="T-x强制转换类型操作符"><a href="#T-x强制转换类型操作符" class="headerlink" title="(T)x强制转换类型操作符"></a>(T)x强制转换类型操作符</h4><h2 id="二-数据类型转换"><a href="#二-数据类型转换" class="headerlink" title="二.数据类型转换"></a>二.数据类型转换</h2><h4 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string str1 = Console.ReadLine();string str2 = Console.ReadLine();int x = Convert.ToInt32(str1);int y = Convert.ToInt32(str2);Console.WriteLine(str1 + str2);Console.WriteLine(x + y);//12//34//1234//46s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><ul><li>不丢失精度的转换</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int x = int.MaxValue;long y = x;Console.WriteLine(y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>C#语言数据文档6.1.2有隐式数值转换</p><p><img src="/../../../../medias/blog_picture/C#/5.png"></p><ul><li>子类向父类的转换</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace CreatOperator{    class Program    {        static void Main(string[] args)        {            Teacher t = new Teacher();            Human h = t;//h仍只有Eat和Animal            Animal a = h;//访问的是Animal，引用不了实例h，只有Eat            a.Eat();        }    }//父类    class Animal    {        public void Eat()        {            Console.WriteLine("Eating");        }    }//子类    class Human:Animal    {        public void Think()        {            Console.WriteLine("Who am I?");        }    }//子类的子类    class Teacher : Human    {        public void Teach()        {            Console.WriteLine("I teach programming.");        }    }}//Eating<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>装箱</li></ul><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><ul><li>有可能丢失精度的转换<strong>cast</strong>(铸造)</li></ul><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Console.WriteLine(ushort.MaxValue);uint x = 65536;ushort y = (ushort)x;//强制把较大的值装到小的空间里Console.WriteLine(y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拆箱</li><li>convert<ul><li>数值类型往字符串类型转换</li></ul></li></ul><h4 id="类型转换操作符"><a href="#类型转换操作符" class="headerlink" title="类型转换操作符"></a>类型转换操作符</h4><p>显式类型转换是一个目标类型的实例的构造器，写在被转换的这个数据类型里</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace CreatOperator{    class Program    {        static void Main(string[] args)        {            Stone stone = new Stone();            stone.Age = 5000;            Monkey wukongSun = (Monkey)stone;            //目标是把一个Stone类型的转变为Monkey类型的            Console.WriteLine(wukongSun.Age);        }    }    class Stone    {        public int Age;        //显式类型转换是一个目标类型的实例的构造器，写在被转换的这个数据类型里        //Monkey(Stone stone)就是一个构造器        public static explicit operator Monkey(Stone stone)        {            Monkey m = new Monkey();            m.Age = stone.Age / 500;//构建Monkey和Stone的关系            return m;        }    }    class Monkey    {        public int Age;    }}//10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比隐式类型转换</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace CreatOperator{    class Program    {        static void Main(string[] args)        {            Stone stone = new Stone();            stone.Age = 5000;            Monkey wukongSun = stone;//此处去掉了(Monkey)stone的(Monkey)            Console.WriteLine(wukongSun.Age);        }    }    class Stone    {        public int Age;        public static implicit operator Monkey(Stone stone)//此处将"explicit"改为"implicit"        {            Monkey m = new Monkey();            m.Age = stone.Age / 500;            return m;        }    }    class Monkey    {        public int Age;    }}//10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="is"><a href="#is" class="headerlink" title="is"></a>is</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Stone stone = new Stone();var result = stone is Stone;//检验的是变量所引用的实例Console.WriteLine(result.GetType().FullName);Console.WriteLine(result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nullable可空类型"><a href="#Nullable可空类型" class="headerlink" title="Nullable<>可空类型"></a>Nullable&lt;&gt;可空类型</h4><p>例子：一个同学没交作业，但是不是那种做的极差的0分，想给他空着</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Nullable&lt;int&gt; x = null;//没交作业x = 100;//交了作业<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>👆👇</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int?x = null;x = 100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是如果这个同学一直没交作业，期末需要录入成绩时给0分</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int?x = null;int y = x??0;//赋0分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ifelse的简写"><a href="#ifelse的简写" class="headerlink" title="?:(ifelse的简写)"></a>?:(ifelse的简写)</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int x = 80;string str = string.Empty;str = (x &gt;= 60)?"Pass":"Failed";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>👆👇</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int x = 80;string str;if(x&gt;60){    str = "Pass";}else{    str = "Failed";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 闲着没事干 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————基本元素和类型</title>
      <link href="/2023/01/11/xiao-bai-ji-ben-yuan-su-he-shu-ju-lei-xing/"/>
      <url>/2023/01/11/xiao-bai-ji-ben-yuan-su-he-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="一-基本元素"><a href="#一-基本元素" class="headerlink" title="一.基本元素"></a>一.基本元素</h2><ul><li>标记Token：对编译器有意义的符号<ul><li>关键字Keyword</li><li>操作符Operator</li><li>标识符Identifier<ul><li>允许“@”字符作为前缀以使关键字能够用作标识符</li></ul></li><li>标点符号</li><li>文本(字面值)</li></ul></li><li>注释与空白<ul><li>CTRL+K CTRL+C👉注释</li><li>CTRL+K CTRL+U👉取消注释</li><li>CTRL+K CTRL+D👉设置文档格式(自动对齐)</li></ul></li></ul><h2 id="二-数据类型"><a href="#二-数据类型" class="headerlink" title="二.数据类型"></a>二.数据类型</h2><ul><li><p>值类型</p><ul><li>结构体Structures</li><li>枚举Enumerations<ul><li>只能从一个集合中选取有效值</li></ul></li></ul></li><li><p>引用类型</p><ul><li><p>类Classes</p></li><li><p>接口Interfaces</p></li><li><p>委托Delegates</p></li></ul></li></ul><h2 id="三-变量"><a href="#三-变量" class="headerlink" title="三.变量"></a>三.变量</h2><p>👇从表面看，变量是用来<strong>存储数据</strong>的</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">int x;x = 100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上，<strong>变量表示了存储位置，并且每个变量都有一个类型，以决定什么样的值能够存入变量</strong></p><p>👆了解为，x是一个<code>标签</code>，对应着内存中的一个地址，100这个值就存在该地址</p><p><strong>变量 = <code>以变量名所对应的内存地址为起点</code>、<code>以其数据类型所要求的存储空间为长度</code>的一块内存区域</strong></p><p><img src="/../../../../medias/blog_picture/C#/2.png" alt="堆，栈，地址的理解"></p><p>引用变量存的是实例的地址</p><h4 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">//装箱int x = 100;object obj;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当发现obj引用的实例在堆上而不在栈上时，把该实例对应的值的内存大小在栈上找一块空间，再把这个地址存储回obj的内存空间</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">//拆箱int y = (int)obj;Console.WriteLine(y);//100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/C#/3.png" alt="装箱和拆箱"></p><h2 id="四-方法"><a href="#四-方法" class="headerlink" title="四.方法"></a>四.方法</h2><p>方法是类或结构体的成员</p><p>方法相当于自定义函数</p><p><img src="/../../../../medias/blog_picture/C#/4.png"></p><p>👆复用，如果要更改3.14159为3.14或者Math.PI可以直接在GetCircleArea处改</p><p>实例方法👇</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Calculator c = new Calculator();c.Add(2.0,3.0);class Calculator{    public double Add(double a,double b);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Calculator c = new Calculator();//c.Add(2.0,3.0);此时这句话无用class Calculator{    public static double Add(double a,double b);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-构造器"><a href="#五-构造器" class="headerlink" title="五.构造器"></a>五.构造器</h2><p><strong>不带以0为默认参数的构造器</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace ConstructExample{    class Program    {        static void Main(string[]args)        {            Student stu = new Student;            Console.WriteLine(stu.ID);            Console.WriteLine(stu.Name);        }    }    class Student    {        //不带参数的构造体    public Student()        {            this.ID = 1;            this.Name = "No name";        }        //        public int ID;        public string Name;    }}//1//No Name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>强制程序员给构造器设置参数</strong>，在这种情况下如果不想设置参数但是要调用该方法，就需要自定义一个默认参数，如上图所示</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">namespace ConstructExample{    class Program    {        static void Main(string[]args)        {            Student stu = new Student(1,"No name");//不能再写成new Student();            Console.WriteLine(stu.ID);            Console.WriteLine(stu.Name);        }    }    class Student    {        //不带参数的构造体    public Student(int initId,string initName)        {            this.ID = initId;            this.Name = initName;        }        //        public int ID;        public string Name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造器快捷键：ctor+tab*2</strong>ctor=Code snippet(小片段)</p><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">class Calculator{    //①    public double Add(int a, int b)    {        return a + b;    }    //②    public int Add(int a, int b)    {        return a + b;    }    ③    public double Add(int a, int b, int c)    {        return a + b + c;    } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👆①与②不能共存，重载与方法的类型无关</p><p>①和③、②和③可共存</p><h2 id="调用方法实际上是压栈的过程"><a href="#调用方法实际上是压栈的过程" class="headerlink" title="调用方法实际上是压栈的过程"></a>调用方法实际上是压栈的过程</h2>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲着没事干 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————类和命名空间</title>
      <link href="/2023/01/10/xiao-bai-lei-he-ming-ming-kong-jian/"/>
      <url>/2023/01/10/xiao-bai-lei-he-ming-ming-kong-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一-类"><a href="#一-类" class="headerlink" title="一.类"></a>一.类</h2><p>是对<code>现实世界事物</code>进行<strong>抽象</strong>所得到的结果</p><h4 id="1-类和对象的关系👇"><a href="#1-类和对象的关系👇" class="headerlink" title="1.类和对象的关系👇"></a>1.类和对象的关系👇</h4><ul><li><p><code>对象</code>也叫<code>实例</code>，是<code>类</code>经过“实例化”后得到的内存中是实体</p><ul><li>e.g. “飞机”和“一架飞机”，前者是概念，后者是实体</li><li>e.g. 蓝图和建筑</li></ul></li><li><p><code>实例化</code>，使用<code>new</code>操作符创建类的实例</p><ul><li><pre><code class="c#">new + 类名();//实例化格式<pre class="line-numbers language-none"><code class="language-none">* ```c#  (new Form()).ShowDialog();//实例化例子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li><li><p>引用变量与实例的关系</p><ul><li><pre><code class="c#"></code></pre></li></ul><p>  Form myForm;//引用变量小朋友<br>  myForm = new Form();//实例化 =小朋友牵着气球<br>  myForm.Text = “My Form!”;//标题文本<br>  myForm.ShowDialog();//显示表单</p><pre><code>* 引用变量与实例的关系可以视作小朋友和气球的关系</code></pre></li></ul><h4 id="2-类的三大成员"><a href="#2-类的三大成员" class="headerlink" title="2.类的三大成员"></a>2.类的三大成员</h4><ul><li><strong>属性Property</strong><ul><li>存储数据，组合起来表示类或对象当前的状态</li><li>e.g. 身高很高，财富充裕，长相不错，组合为高富帅</li></ul></li><li><strong>方法Method</strong><ul><li>表示类或对象“能做什么”</li></ul></li><li><strong>事件Event</strong></li></ul><h3 id="3-静态成员与实例成员"><a href="#3-静态成员与实例成员" class="headerlink" title="3.静态成员与实例成员"></a>3.静态成员与实例成员</h3><ul><li><strong>静态Static</strong>成员表示它是<code>类的成员</code></li><li><strong>实例</strong>成员表示它是<code>对象的成员</code></li><li><strong>绑定Bing</strong>指的是编译器如何把一个成员与类或对象关联起来<ul><li>**.**成员访问操作符</li></ul></li></ul><h2 id="二-名称空间"><a href="#二-名称空间" class="headerlink" title="二.名称空间"></a>二.名称空间</h2><p>把类用良好的结构组合在一起，以树形结构组织类</p><p><strong>包：某市→类库：图书馆→名称空间：书架→类：书→方法：目录</strong></p><h2 id="三-类库"><a href="#三-类库" class="headerlink" title="三.类库"></a>三.类库</h2><p>类库的引用</p><ul><li><p>DLL引用(无源代码，黑盒类库)</p><ul><li><p>在<strong>解决方案</strong>中的<strong>依赖项</strong>右键<strong>添加项目引用</strong>中可以添加以<code>dll</code>为后缀的文件作为类库引用</p></li><li><p>NuGet</p><ul><li>只有DLL没有源代码很危险，比如引用了一个<code>类库</code>，但是这个<code>类库</code>中一些代码还有一些<code>底层的东西</code>没有引用进来导致报错</li></ul></li></ul></li><li><p>项目引用(有源代码，白盒类库)</p><ul><li>同上，但是是在<code>程序集中</code></li></ul></li></ul><p><img src="/../../../../medias/blog_picture/C#/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲着没事干 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入土————AT24C02</title>
      <link href="/2022/11/27/ru-tu-at24c02/"/>
      <url>/2022/11/27/ru-tu-at24c02/</url>
      
        <content type="html"><![CDATA[<h1 id="一-存储器介绍"><a href="#一-存储器介绍" class="headerlink" title="一.存储器介绍"></a>一.存储器介绍</h1><h2 id="1-易失性存储器-RAM"><a href="#1-易失性存储器-RAM" class="headerlink" title="1.易失性存储器/RAM"></a>1.易失性存储器/RAM</h2><p>全称：RamdomAccessMemory</p><p>百度百科：<strong>它在任何时候都可以读写</strong>，RAM通常是作为操作系统或其他正在运行程序的临时存储介质(可称作系统内存)。不过，<strong>当电源关闭时RAM不能保留数据</strong>，如果需要保存数据，就必须把它们写入到一个<strong>长期的存储器</strong>(如硬盘)中。</p><p>①SRAM(静态RAM) steady</p><ul><li>用电路储存，CPU用到，速度最快，容量小</li></ul><p>②DRAM(动态RAM)</p><ul><li>用电容充放电的高低电平来存储，通常配一个扫描电路，给它补电</li></ul><h2 id="2-非易失性存储器-ROM"><a href="#2-非易失性存储器-ROM" class="headerlink" title="2.非易失性存储器/ROM"></a>2.非易失性存储器/ROM</h2><p>全称：non-volatile memory</p><p>百度百科：是指当<strong>电流关掉后</strong>，<strong>所存储的数据不会消失</strong>的电脑存储器，缺点是存储比较慢</p><p>①Mask ROM（掩膜ROM）：只读不写</p><p><img src="/../../../../medias/blog_picture/51/67.png"></p><p>②PROM(可编程ROM)：只能写一次</p><p><img src="/../../../../medias/blog_picture/51/68.png"></p><ul><li>编程时左边给高电平、下边给0可以把蓝色的二极管<strong>击穿</strong>，实现可写，所以也叫<strong>烧录程序</strong>哈哈</li></ul><p>③EPROM(可擦除可编程ROM)：可写</p><p>④E2PROM(电可擦除可编程ROM)：5V几毫秒就能擦除</p><p>⑤Flash(内存)：</p><p>⑥硬盘、软盘、光盘等：通过磁介质传递</p><h1 id="二-AT24C02介绍"><a href="#二-AT24C02介绍" class="headerlink" title="二.AT24C02介绍"></a>二.AT24C02介绍</h1><p><img src="/../../../../medias/blog_picture/51/69.png"></p><h1 id="三-I2C"><a href="#三-I2C" class="headerlink" title="三.I2C"></a>三.I2C</h1><p><img src="/../../../../medias/blog_picture/51/70.png"></p><h2 id="1-起始-终止"><a href="#1-起始-终止" class="headerlink" title="1.起始&amp;终止"></a>1.起始&amp;终止</h2><p><img src="/../../../../medias/blog_picture/51/71.png"></p><h2 id="2-发送-接受字节"><a href="#2-发送-接受字节" class="headerlink" title="2.发送/接受字节"></a>2.发送/接受字节</h2><p><img src="/../../../../medias/blog_picture/51/72.png"></p><p><img src="/../../../../medias/blog_picture/51/73.png"></p><p>👆注意主机和从机，在SDA中紫色是从机，黑色是主机</p><p>应答可以作为第九位</p><ul><li>主机释放了SDA**(给SDA置1)**变成高电平，把控制权给从机</li><li>此时从机可以操控发1或发0</li><li>当SCL拉低，从机自动将下一位数据放到总线上</li></ul><h2 id="3-发送-接收应答"><a href="#3-发送-接收应答" class="headerlink" title="3.发送/接收应答"></a>3.发送/接收应答</h2><p><img src="/../../../../medias/blog_picture/51/74.png"></p><p>应答可以作为数据的第九位</p><p>用来判断从机是否应答或者主机是否发送应答</p><p><img src="/../../../../medias/blog_picture/51/75.png"></p><p>呜呜呜呜呜呜呜呜呜呜<strong>从1：15：21开始，代码不能正常运行</strong>呜呜呜呜呜呜呜呜呜呜放弃了放弃了</p><h1 id="四-学到了啥"><a href="#四-学到了啥" class="headerlink" title="四.学到了啥"></a>四.学到了啥</h1><hr><p>感觉比较有用的是在定时器里调用函数，同时对不同模块函数计时</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count1<span class="token punctuation">,</span>T0Count2<span class="token punctuation">;</span>TL0 <span class="token operator">=</span> <span class="token number">0x18</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>T0Count1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>T0Count1<span class="token operator">&gt;=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">//20ms返回一次1或0</span><span class="token comment">//通过记录上一次和这一次的返回值判断是按下还是松开</span><span class="token punctuation">{</span>T0Count1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Key_Loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这时候Key函数无中生有，有了自己的中断</span><span class="token punctuation">}</span>T0Count2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>T0Count2<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>T0Count2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Nixie_Loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Key_Loop</strong>   <strong>Nixie_Loop</strong></p><p>只需要改变T0Count&gt;=x就可以有针对的计时</p><p>这个loop函数相当于绕了一个圈把子函数调用了一次，但是起码起到了计时的作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————队列</title>
      <link href="/2022/11/22/xiao-bai-dui-lie/"/>
      <url>/2022/11/22/xiao-bai-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="一-概念"><a href="#一-概念" class="headerlink" title="一.概念"></a>一.概念</h1><h2 id="1-前front-后rear"><a href="#1-前front-后rear" class="headerlink" title="1.前front 后rear"></a>1.前front 后rear</h2><ul><li><p>出队，从头出</p></li><li><p>入队，从尾入</p></li></ul><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><p>链式队列，静态队列，循环队列</p><ul><li>链式队列–用链表实现</li><li>静态队列–用数组实现，通常都必须是循环队列</li></ul><h2 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h2><h3 id="①静态队列为什么必须是循环队列"><a href="#①静态队列为什么必须是循环队列" class="headerlink" title="①静态队列为什么必须是循环队列"></a>①静态队列为什么<strong>必须是循环队列</strong></h3><p>r→r→</p><p>​dd</p><p>​cf→c</p><p>​b==&gt;  b</p><p>f→   a a</p><p>👆a和b出队之后，对于数组a来说，a[0]、a[1]这两个空间就被浪费了，因为f和r一直在往上移动，所以相当于a[0]、a[1]不能再使用了。用传统数组来实现队列，无论是入队还是出队，参数都只能增不能减</p><h3 id="②循环队列需要几个参数及各个参数的含义"><a href="#②循环队列需要几个参数及各个参数的含义" class="headerlink" title="②循环队列需要几个参数及各个参数的含义"></a>②循环队列需要<strong>几个参数</strong>及各个<strong>参数的含义</strong></h3><ul><li><p>需要<strong>2个</strong>参数来确定 <strong>front</strong> <strong>rear</strong></p></li><li><p>2个参数在不同场合有<strong>不同的的定义</strong></p><ul><li><p>场合：</p><blockquote><p> 1）队列初始化</p><p>​front和rear的值都是<strong>零</strong></p><p>2）队列非空</p><p>​front代表的是队列的<strong>第一个元素</strong></p><p>​rear代表的是队列的<strong>最后一个有效元素的下一个</strong></p><p>3）队列空</p><p>​front和rear的<strong>值相等</strong>，但不一定是零</p></blockquote></li></ul></li></ul><h3 id="③循环队列出、入队伪算法讲解"><a href="#③循环队列出、入队伪算法讲解" class="headerlink" title="③循环队列出、入队伪算法讲解"></a>③循环队列<strong>出、入队伪算法</strong>讲解</h3><h4 id="1-入队"><a href="#1-入队" class="headerlink" title="1.入队"></a>1.入队</h4><ul><li><p>将值存入r所代表的位置</p></li><li><p>r=(r+1)%数组的长度</p></li></ul><h4 id="2-出队"><a href="#2-出队" class="headerlink" title="2.出队"></a>2.出队</h4><ul><li>f=(f+1)%数组的长度</li></ul><h3 id="④如何判断循环队列是否为空、已满"><a href="#④如何判断循环队列是否为空、已满" class="headerlink" title="④如何判断循环队列是否为空、已满"></a>④如何判断循环队列是否为<strong>空、已满</strong></h3><h4 id="1-空"><a href="#1-空" class="headerlink" title="1.空"></a>1.空</h4><ul><li>f=r</li></ul><h4 id="2-满"><a href="#2-满" class="headerlink" title="2.满"></a>2.满</h4><ul><li><p>Ⅰ多增加一个标识参数(通常不用这个)</p></li><li><p>Ⅱ少用一个元素。本来可以放n个元素，<strong>定义n-1个是满的</strong>(通常使用这种方式)</p><ul><li><p>如何判断队列已满：r和f的值紧挨着，则队列已满</p></li><li><pre><code class="c">if((r+1)%数组的长度==f)    //已满else    //不满<pre class="line-numbers language-none"><code class="language-none"># 二.代码```c#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;malloc.h&gt;#include&lt;stdlib.h&gt;typedef struct Queue{int *pBase;int front;int rear;}QUEUE,*PQUEUE;void init(PQUEUE);//初始化 bool fullQueue(PQUEUE);//判断队列是否满 bool enQueue(PQUEUE,int);//入队 bool emptyQueue(PQUEUE);//判断队列是否为空void traverse(PQUEUE);//遍历bool outQueue(PQUEUE,int*);//出队 int main(){//int val;int *pVal=(int*)malloc(sizeof(int)*4); QUEUE Q;init(&amp;Q);enQueue(&amp;Q,1);enQueue(&amp;Q,2);enQueue(&amp;Q,3);enQueue(&amp;Q,4);enQueue(&amp;Q,5);enQueue(&amp;Q,6);enQueue(&amp;Q,7);traverse(&amp;Q);if(outQueue(&amp;Q,pVal))printf("出队的数字是:%d\n",*pVal);//if (outQueue(&amp;Q,&amp;val))//printf("出队的数字是%d\n",val);elseprintf("出队失败！\n"); traverse(&amp;Q);free(pVal);pVal=NULL;return 0;}void init(PQUEUE pQ){pQ-&gt;pBase=(int*)malloc(sizeof(int)*6);pQ-&gt;front=0;pQ-&gt;rear=0;}bool fullQueue(PQUEUE pQ){if((pQ-&gt;rear+1)%6==pQ-&gt;front)return true;elsereturn false;}bool enQueue(PQUEUE pQ,int val){if(fullQueue(pQ))return false;else{pQ-&gt;pBase[pQ-&gt;rear]=val;pQ-&gt;rear=(pQ-&gt;rear+1)%6;}}bool emptyQueue(PQUEUE pQ){if(pQ-&gt;rear==pQ-&gt;front)return true;elsereturn false;}void traverse(PQUEUE pQ){if(emptyQueue(pQ)){printf("队列为空\n");exit(-1);}else{int i=pQ-&gt;front;while(pQ-&gt;rear!=i){printf("%d",pQ-&gt;pBase[i]); i=(i+1)%6;}printf("\n");}return;}bool outQueue(PQUEUE pQ,int *pVal){if(emptyQueue(pQ))return false;else{*pVal=pQ-&gt;pBase[pQ-&gt;front];pQ-&gt;front=(pQ-&gt;front+1)%6;return true;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————栈</title>
      <link href="/2022/11/20/xiao-bai-zhan/"/>
      <url>/2022/11/20/xiao-bai-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="一-栈和堆"><a href="#一-栈和堆" class="headerlink" title="一.栈和堆"></a>一.栈和堆</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">double</span> <span class="token operator">*</span>q<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>*q</strong>就是<strong>栈</strong>里的，<strong>200</strong>是堆里的</p><p>动态分配的都在堆里分配，由程序员手动分配</p><p>静态分配的都在栈里分配，由系统自动分配</p><h2 id="栈："><a href="#栈：" class="headerlink" title="栈："></a>栈：</h2><p>1.定义：</p><ul><li>实现“先进后出”的存储结构</li></ul><p>2.分类：</p><ul><li>静态栈 </li><li>动态栈：内核就是链表</li></ul><p>3.算法</p><ul><li>出栈</li><li>压栈</li></ul><p>4.变量</p><ul><li>pTop</li><li>pBottom</li></ul><p><strong>栈空</strong>：pTop==pBottom</p><p>5.应用</p><ul><li>函数调用</li><li>中断</li><li>表达式求值</li><li>内存分配</li><li>缓冲处理</li><li>迷宫</li></ul><h1 id="二-代码"><a href="#二-代码" class="headerlink" title="二.代码"></a>二.代码</h1><h2 id="1-两个结构体的的定义"><a href="#1-两个结构体的的定义" class="headerlink" title="1.两个结构体的的定义"></a>1.两个结构体的的定义</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>PNODE<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span><span class="token punctuation">{</span>PNODE pTop<span class="token punctuation">;</span>PNODE pBottom<span class="token punctuation">;</span><span class="token punctuation">}</span>STACK<span class="token punctuation">,</span><span class="token operator">*</span>PSTACK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👉对于Stack的理解：</p><p>Stack这个结构体里有两个成员——<strong>名字叫pTop和pBottom、类型为NODE指针</strong></p><h2 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token comment">//传参：栈的地址</span><span class="token punctuation">{</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给栈顶申请内存空间</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token comment">//此时pT和pB指向同一个内存</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//让pT和pB指向同一个节点且该节点的指针域存放的是NULL，该节点作为一个头结点。</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-压栈"><a href="#3-压栈" class="headerlink" title="3.压栈"></a>3.压栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE pNew<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为新节点申请空间</span><span class="token keyword">if</span><span class="token punctuation">(</span>pNew<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pNew<span class="token operator">-&gt;</span>data<span class="token operator">=</span>val<span class="token punctuation">;</span>pNew<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span>pNew<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">pNew<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>👆理解：</p><p>第一个元素，**pNew-&gt;pNext=pS-&gt;pTop;<strong>和</strong>pNew-&gt;pNext=pS-&gt;pBottom;**都可以 <code>理解为插入的新节点的指针域和pT、pB是一样的，即指向一样，都指向头结点</code></p><p><strong>但是从第二个节点开始</strong>，他的指针域存放的应该得是上一个节点的地址，对应图上的就是<code>右边蓝色的箭头应该==左边被蓝色x覆盖的红色箭头</code>，即<strong>pNew-&gt;pNext=pS-&gt;pTop;</strong></p><h2 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4.遍历"></a>4.遍历</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-出栈"><a href="#5-出栈" class="headerlink" title="5.出栈"></a>5.出栈</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>PNODE a<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个应该也很好理解：删除a指向的节点，pTop负责往下走，防止因为删掉上面的节点而丢失下面的节点的地址</p><h2 id="6-清空"><a href="#6-清空" class="headerlink" title="6.清空"></a>6.清空</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致思路和出栈相似，就是多了个循环，再调换一下语句顺序即可</p><h2 id="7-完整代码"><a href="#7-完整代码" class="headerlink" title="7.完整代码"></a>7.完整代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;malloc.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>PNODE<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span><span class="token punctuation">{</span>PNODE pTop<span class="token punctuation">;</span>PNODE pBottom<span class="token punctuation">;</span><span class="token punctuation">}</span>STACK<span class="token punctuation">,</span><span class="token operator">*</span>PSTACK<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PSTACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PSTACK<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>PSTACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>PSTACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>PSTACK<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">empty</span><span class="token punctuation">(</span>PSTACK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>STACK S<span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n出栈后结果为；\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"清除成功！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"清除失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE pNew<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pNew<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pNew<span class="token operator">-&gt;</span>data<span class="token operator">=</span>val<span class="token punctuation">;</span>pNew<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span>pNew<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>PNODE a<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>bool <span class="token function">empty</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>PSTACK pS<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">==</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>pS<span class="token operator">-&gt;</span>pBottom<span class="token punctuation">)</span><span class="token punctuation">{</span>pS<span class="token operator">-&gt;</span>pTop<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>p<span class="token operator">=</span>pS<span class="token operator">-&gt;</span>pTop<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————链表</title>
      <link href="/2022/11/18/xiao-bai-lian-biao/"/>
      <url>/2022/11/18/xiao-bai-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="一-typedef"><a href="#一-typedef" class="headerlink" title="一.typedef"></a>一.typedef</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sid<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>ST<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span><span class="token comment">//&lt;==&gt;ST student;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sid<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">*</span>PST<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//&lt;==&gt;PST *p;</span><span class="token comment">//PST&lt;==&gt;struct Student *</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct Student{    int sid;    int age;}*PST,ST;//效果是上面的整合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二-链表"><a href="#二-链表" class="headerlink" title="二.链表"></a>二.链表</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><ul><li>n个节点离散分配</li><li>批次通过指针相连</li><li>每隔节点只有一个前驱节点，每个节点只有一个后续节点</li><li>首节点没有前驱节点，尾节点没有后续节点</li><li>[离散存储]</li></ul><h2 id="2-专业术语"><a href="#2-专业术语" class="headerlink" title="2.专业术语"></a>2.专业术语</h2><ul><li>首节点：第一个有效的节点</li><li>尾节点：最后一个有效节点</li><li>头结点：第一个有效节点之前的节点<ul><li>没有存放有效数据</li></ul></li><li>头指针：指向头节点的指针变量</li><li>尾指针：指向尾节点的指针变量</li></ul><h2 id="3-确定一个链表需要的参数"><a href="#3-确定一个链表需要的参数" class="headerlink" title="3.确定一个链表需要的参数"></a>3.确定一个链表需要的参数</h2><p><strong>只需要一个头指针</strong></p><p>👉为什么不用头结点</p><ul><li><p>因为头结点的数据类型和后面有数据域的节点的数据类型是一样的(虽然头结点没有数据域，但是他会有垃圾值，会占内存)</p></li><li><p>头指针只占四个字节来存放头结点的地址</p></li></ul><h2 id="4-节点"><a href="#4-节点" class="headerlink" title="4.节点"></a>4.节点</h2><ul><li>都要有一个指针域和数据域</li><li>结构体的某一个成员指向的是跟它一摸一样的数据类型的数据</li><li>要为创建的每一个节点申请空间</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token comment">//数据域</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>pNext<span class="token punctuation">;</span><span class="token comment">//指针域</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-分类"><a href="#5-分类" class="headerlink" title="5.分类"></a>5.分类</h2><ul><li>单链表</li><li>双链表：每个节点有两个指针域</li><li>循环链表：能通过任何一个节点找到其他节点</li><li>非循环链表</li></ul><h1 id="三-作用"><a href="#三-作用" class="headerlink" title="三.作用"></a>三.作用</h1><h2 id="1-创建-初始化"><a href="#1-创建-初始化" class="headerlink" title="1.创建/初始化"></a>1.创建/初始化</h2><ul><li>需要用到的变量：最初创建的链表的长度<strong>len</strong>、每个结构体数据域的数据<strong>val</strong>、头节点<strong>pHead</strong>、尾节点<strong>pTail</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//xxxxxxx</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">pNew<span class="token operator">-&gt;</span>data<span class="token operator">=</span>val<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>pTail=pHead<ul><li>可以理解为用尾指针是针线，把原有链表最后一个节点和新加入的节点连接起来</li></ul></li></ul><h2 id="2-插入"><a href="#2-插入" class="headerlink" title="2.插入"></a>2.插入</h2><ul><li><p>需要用到的参数：头结点，新插入的结构体的位置，新插入的结构体的数据域中的数值</p></li><li><p>需要考虑的问题：要怎么通过输入的<strong>pos</strong>找到要<strong>指向新插入结构体位置的结构体指针</strong></p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">PNODE p<span class="token operator">=</span>pHead<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//i&lt;p-1就是让p指向要插入位置的上一个结构体 </span><span class="token punctuation">{</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*条件①：确保是在一个不是空的结构体后插入的条件②：p要指向即将要插入的位置的前一个结构体*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要通过遍历的方式找到目标结构体，假设我们要插入到pos=3</p><ul><li><strong>i&lt;pos=1</strong>这里 i=0时 p=第一个有效结构体</li><li>i=1时，p=第二个有效结构体</li><li>i=2不符合循环条件</li><li>所以while结束后，p就是第二个有效结构体的指针变量</li></ul><h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h2><ul><li><p>删除是通过修改前一个结构体指针的指向来删除的</p></li><li><p>所以删除的位置的前一个指针的指向不能是NULL</p></li><li><p>如果要删除的对象的下一个已经是NULL了，那么就不会继续遍历下去 </p></li><li><p><strong>vs插入</strong>，如果要插入的位置是最后一个，即p-&gt;</p></li></ul><h1 id="四-全部代码"><a href="#四-全部代码" class="headerlink" title="四.全部代码"></a>四.全部代码</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;malloc.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h&gt;</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span><span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>PNODE<span class="token punctuation">;</span><span class="token comment">//函数声明</span>PNODE <span class="token function">creatList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traverseList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">isEmpty</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lengthList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">insertList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">deleteList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>pVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sortList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lengthList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>PNODE pHead<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>pHead<span class="token operator">=</span><span class="token function">creatList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//traverseList(pHead);</span><span class="token comment">/*if(isEmpty(pHead))printf("链表为空！\n");elseprintf("链表不空！\n");return 0;*/</span><span class="token comment">/*int len=lengthList(pHead);printf("长链表的长度是%d",len);*/</span><span class="token comment">//sortList(pHead);</span><span class="token comment">//traverseList(pHead);</span><span class="token comment">//insertList(pHead,4,23);</span><span class="token comment">//traverseList(pHead);</span><span class="token function">deleteList</span><span class="token punctuation">(</span>pHead<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">traverseList</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>PNODE <span class="token function">creatList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>PNODE pHead<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pHead<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>PNODE pTail<span class="token operator">=</span>pHead<span class="token punctuation">;</span>pTail<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入您需要生成的链表节点的个数：len="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%请输入第%d个节点的值"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>PNODE pNew<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pNew<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>pNew<span class="token operator">-&gt;</span>data<span class="token operator">=</span>val<span class="token punctuation">;</span>pTail<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>pNew<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>pTail<span class="token operator">=</span>pNew<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> pHead<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">traverseList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pHead<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>bool <span class="token function">isEmpty</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pHead<span class="token operator">-&gt;</span>pNext<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lengthList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pHead<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">++</span>len<span class="token punctuation">;</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sortList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">{</span>PNODE p<span class="token operator">=</span>pHead<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>PNODE q<span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">lengthList</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>data <span class="token operator">&gt;</span> q<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>temp<span class="token operator">=</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">=</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>q<span class="token operator">-&gt;</span>data<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span>q<span class="token operator">=</span>q<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">insertList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>PNODE p<span class="token operator">=</span>pHead<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//i&lt;p-1就是让p指向要插入位置的上一个结构体 </span><span class="token punctuation">{</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span><span class="token constant">NULL</span><span class="token operator">==</span>p<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>PNODE pNew<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pNew<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> pNew<span class="token operator">-&gt;</span>data<span class="token operator">=</span>val<span class="token punctuation">;</span>PNODE q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>pNew<span class="token punctuation">;</span>pNew<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>q<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> bool <span class="token function">deleteList</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>pVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>PNODE p<span class="token operator">=</span>pHead<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>pNext<span class="token operator">!=</span><span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//i&lt;p-1就是让p指向要删除位置的上一个结构体 </span><span class="token punctuation">{</span>p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span><span class="token constant">NULL</span><span class="token operator">==</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span>PNODE pNew<span class="token operator">=</span><span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pNew<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> PNODE q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span><span class="token operator">*</span>pVal<span class="token operator">=</span>q<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>pNext<span class="token operator">=</span>p<span class="token operator">-&gt;</span>pNext<span class="token operator">-&gt;</span>pNext<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————连续储存数组</title>
      <link href="/2022/11/13/xiao-bai-lian-xu-chu-cun-shu-zu/"/>
      <url>/2022/11/13/xiao-bai-lian-xu-chu-cun-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="一-数组"><a href="#一-数组" class="headerlink" title="一.数组"></a>一.数组</h1><ul><li>存放类型相同，大小相等的元素</li></ul><h1 id="二-代码部分"><a href="#二-代码部分" class="headerlink" title="二.代码部分"></a>二.代码部分</h1><h2 id="1-对于传参"><a href="#1-对于传参" class="headerlink" title="1.对于传参"></a>1.对于传参</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">Arr</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>pBase<span class="token punctuation">;</span><span class="token comment">//存储的是数组第一个元素的地址 </span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//数组所能容纳的最大元素的个数 </span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment">//当前数组有效元素的个数 </span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> arr<span class="token punctuation">;</span><span class="token function">initArr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址只用第一个字节的地址表示，第一个字节的地址占4个字节 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">initArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token comment">//此时指向arr的第一个地址，现在pArr存放的是arr第一个字节的地址 </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">.</span>len<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">initArr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*对于这一行，如果写的是👇initArr(arr);在定义变量时传参传的是(struct Arr array)此时返回到主函数里的arr的len是垃圾值，因为是静态分配内存，当调用完initArr之后传参的就不存在了所以要用到"&amp;arr"，将指针的地址传给initArr中那么在initArr函数里，*pArr就是arr这样做的优点：对比用arr传参(需要用到12个字节)，这样子传参省空间(arr的第一个地址只占4个字节)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-对结构体的理解"><a href="#2-对结构体的理解" class="headerlink" title="2.对结构体的理解"></a>2.对结构体的理解</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Arr</span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token operator">*</span>pBase<span class="token punctuation">;</span><span class="token comment">//存储的是数组第一个元素的地址 </span><span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//数组所能容纳的最大元素的个数 </span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment">//当前数组有效元素的个数 </span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👉因为数组名就是数组首地址元素，所以在定义*<em>int <em>pBase</em></em> 时，pBase是指针变量，也就是地址，同时它是一个数组名</p><p>👉其实也可以理解为，这个结构体，主体部分是pBase，其他成员是这个数组的一些属性的说明</p><p>👉为了把这些属性和数组主体联系起来，搞了一个结构体把它们放在一起</p><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">initArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token comment">//此时指向arr的第一个地址，现在pArr存放的是arr第一个字节的地址 </span><span class="token punctuation">{</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态内存分配失败！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>pArr<span class="token operator">-&gt;</span>len<span class="token operator">=</span>length<span class="token punctuation">;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//告诉程序这个函数结束了 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👉pBase是一个数组，先给他分配空间</p><ul><li>对pBase内存是否分配成功要做一个判定</li><li>判定成功了就给他这个结构体赋值</li></ul><h2 id="4-打印"><a href="#4-打印" class="headerlink" title="4.打印"></a>4.打印</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">showArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-判断数组里是否有元素"><a href="#5-判断数组里是否有元素" class="headerlink" title="5.判断数组里是否有元素"></a>5.判断数组里是否有元素</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-判断数组是否是满的"><a href="#6-判断数组是否是满的" class="headerlink" title="6.判断数组是否是满的"></a>6.判断数组是否是满的</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">==</span>pArr<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-追加元素"><a href="#7-追加元素" class="headerlink" title="7.追加元素"></a>7.追加元素</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">appendArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token comment">//val是要加入的元素</span><span class="token punctuation">{</span><span class="token comment">//满时返回false，不加</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token comment">//不满时追加</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span> <span class="token punctuation">(</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👉cnt的值=最后一个元素的下标+1</p><p>👉最后记得要给有效值+1</p><h2 id="8-插入元素"><a href="#8-插入元素" class="headerlink" title="8.插入元素"></a>8.插入元素</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">insertArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">&gt;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token punctuation">(</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>满了、输入的位置不符合数组现有的→返回错误，在主程序里不执行</li></ul><p>👉对于for里的</p><ul><li><strong>i=pArr-&gt;cnt-1</strong> i对应着下标</li><li><strong>i=pos-1</strong> 插入时只变动要插入位置的该位上和该位后的元素</li><li><strong>–i</strong> 进行插入的逻辑是，先对最后一位操作，最后一位先往后移动，然后前面的再往后移动，最后空出一个位置给要插入的元素插入</li></ul><p>👉然后</p><ul><li><p>前一个元素移动到后一个元素上</p></li><li><p>放置新元素</p></li><li><p>有效值+1</p></li></ul><h2 id="9-删除元素"><a href="#9-删除元素" class="headerlink" title="9.删除元素"></a>9.删除元素</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">deleteArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>pVal<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>pos<span class="token operator">&gt;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">)</span><span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token operator">*</span>pVal<span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pos<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>空的、输入不符合数组现有的→返回错误，再主程序中不执行</li></ul><p>感觉跟插入一个意思….</p><h2 id="10-元素倒置"><a href="#10-元素倒置" class="headerlink" title="10.元素倒置"></a>10.元素倒置</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">inversionArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j<span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-元素排序"><a href="#11-元素排序" class="headerlink" title="11.元素排序"></a>11.元素排序</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sortArr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span><span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>pArr<span class="token operator">-&gt;</span>cnt<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>t<span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>pArr<span class="token operator">-&gt;</span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入土————DS1302时钟</title>
      <link href="/2022/11/12/ru-tu-ds1302-shi-zhong/"/>
      <url>/2022/11/12/ru-tu-ds1302-shi-zhong/</url>
      
        <content type="html"><![CDATA[<p><strong>DS1302</strong></p><h1 id="一-引脚分装"><a href="#一-引脚分装" class="headerlink" title="一.引脚分装"></a>一.引脚分装</h1><p>1.DIP直插</p><p>2.SO贴片</p><p><img src="/../../../../medias/blog_picture/51/59.png"></p><p><img src="/../../../../medias/blog_picture/51/60.png"></p><p>其中，<strong>CE为高电平的时候下面的命令(io和SCLK)才有用。</strong>时间存储在实时时钟里，在左边被访问和读写</p><h1 id="二-内部寄存器"><a href="#二-内部寄存器" class="headerlink" title="二.内部寄存器"></a>二.内部寄存器</h1><p><img src="/../../../../medias/blog_picture/51/61.png"></p><p>WP是读写保护</p><h1 id="三-考虑的问题"><a href="#三-考虑的问题" class="headerlink" title="三.考虑的问题"></a>三.考虑的问题</h1><p>在哪(xx寄存器) 写入 什么</p><p>在哪(xx寄存器) 读出 什么(1302芯片返回的，单片机需要读到)</p><p><img src="/../../../../medias/blog_picture/51/62.png"></p><p>第六位：给1——RAM，给0——CK</p><p>6~1完成“在哪”的任务</p><p>第零位：完成“读/写”的任务，给1——读，给0——写</p><p>在<strong>二</strong>的表中已经把“读/写”的命令列出来了</p><h2 id="1-时序定义"><a href="#1-时序定义" class="headerlink" title="1.时序定义"></a>1.时序定义</h2><p><img src="/../../../../medias/blog_picture/51/63.png"></p><p>上升沿(io口的电平被)写入(/向时钟芯片写入数据)，下降沿(DS1302把他的数据)输出(时钟芯片向单片机写入数据)，<strong>所以，只有READ中的D0~D7是芯片写入的</strong></p><p>写入时，先写入数据再进行上升沿。</p><h2 id="2-每个按键的功能"><a href="#2-每个按键的功能" class="headerlink" title="2.每个按键的功能"></a>2.每个按键的功能</h2><ul><li>K1选择模式 MODE=1👉设置时间 MODE=0👉显示流动的时间</li><li>K2选择要更改的时间值(年月日时分秒)</li><li>K3更改某个时间值，+</li><li>K4更改某个时间值，-</li></ul><h1 id="四-代码"><a href="#四-代码" class="headerlink" title="四.代码"></a>四.代码</h1><h2 id="DS1302-C"><a href="#DS1302-C" class="headerlink" title="DS1302.C"></a>DS1302.C</h2><p><strong>1.</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void DS1302_WriteByte(unsigned char Command,Data)//写入{unsigned char i;DS1302_CE=1;for(i=0;i&lt;8;i++){DS1302_IO=Command&amp;(0x01&lt;&lt;i);//1~7位直接清零，只留第0位DS1302_SCLK=1;DS1302_SCLK=0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于每一位，先写入操作指令再给上升沿</p><p><strong>2.</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">DS1302_ReadByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Command<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>Data<span class="token operator">=</span><span class="token number">0x00</span><span class="token punctuation">;</span>Command<span class="token operator">|=</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment">//将指令转换为读指令</span>DS1302_CE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//读出-指令</span><span class="token punctuation">{</span>DS1302_IO<span class="token operator">=</span>Command<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>DS1302_SCLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>DS1302_SCLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//读出-数据</span><span class="token punctuation">{</span>DS1302_SCLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//看时序图，先少一个高电平</span>DS1302_SCLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//最后是低电平</span><span class="token keyword">if</span><span class="token punctuation">(</span>DS1302_IO<span class="token punctuation">)</span><span class="token punctuation">{</span>Data<span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>DS1302_CE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>DS1302_IO<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//读取后将IO设置为0，否则读出的数据会出错</span><span class="token keyword">return</span> Data<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于为什么要return DataX，👇我的理解</p><ul><li>首先在<strong>DS1302_WriteByte</strong>中写入数据，是多少秒(0~15)，就输入0x xx，然后16进制转2进制</li><li>在<strong>DS1302_ReadByte</strong>中读取数据，对每一位进行判断</li><li>e.g. 写入时写入了0x03—16转2—&gt;0000 0100，然后在read函数里对每一位进行判断，执行完读命令字后，数据传输到IO口上，是1的，Data就置1，否则置0，所以Data就是个接收数据的中转站罢了。</li><li>然后return之后，LCD那里的定义是<strong>unsigned int Number</strong>在传参时，已经自动把2进制转换为10进制了，所以显示出来的数据就是10进制的。</li></ul><p><strong>3.自动清零</strong></p><p>e.g.希望让a超过5之后清零，从0开始再递增</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span>a<span class="token operator">=</span><span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//a=6%6=0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4.</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">7</span><span class="token operator">||</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">8</span><span class="token operator">||</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">10</span><span class="token operator">||</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">{</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//12-31调回11-xx时会显示11-31，所以需要加上这句话</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于为什么要在K4-这里复制一部分K3+的代码</p><ul><li>从12-31调回11月份时，会显示为11-31，所以要加上那部分代码</li></ul><p><strong>5.</strong></p><p>某个时间值被选中后跳动</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>TimeSetSelect<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>TimeSetFlashFlag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>DS1302_Time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>定时器每隔500ms对TimeSetFlashFlag置1或0，当TSFF为1且时间值选中的是0–时 时，在原本显示时的时间那一块地方显示空格；如果不符合if的条件，则显示时间，所以TSFF在0和1跳动时，决定了频闪的显示。</p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————LCD1602</title>
      <link href="/2022/10/30/ru-men-lcd1602/"/>
      <url>/2022/10/30/ru-men-lcd1602/</url>
      
        <content type="html"><![CDATA[<h1 id="LCD1602-16-2"><a href="#LCD1602-16-2" class="headerlink" title="LCD1602(16*2)"></a>LCD1602(16*2)</h1><h2 id="一-原理部分"><a href="#一-原理部分" class="headerlink" title="一.原理部分"></a>一.原理部分</h2><h3 id="1-引脚"><a href="#1-引脚" class="headerlink" title="1.引脚"></a>1.引脚</h3><p>显示容量：16*2个字符</p><p><img src="/../../../../medias/blog_picture/51/76.png"></p><p>VO(对比度)：<strong>值太小</strong>显示会很浅，<strong>看不清</strong>，<strong>值太大</strong>每个像素都显示出来，<strong>无法辨别</strong>哪些是我们想要的，<strong>我们用R1来调节</strong></p><p>D1~D7：<strong>并行传送模式</strong>，最好接在<strong>一组io口</strong>上，D0–P0_1，D7–P0_7(高位对高位，低位对低位)</p><p>RS(在哪写)&amp;RW(写什么)&amp;E：控制引脚，控制D1~D7</p><p>E：上升沿的时候把数据传到D1~D7，下降沿的时候执行命令</p><h3 id="2-内部结构"><a href="#2-内部结构" class="headerlink" title="2.内部结构"></a>2.内部结构</h3><p><img src="/../../../../medias/blog_picture/51/77.png"></p><p>C(character)G(generater)字符生成</p><p>CGRAM是可写的，是自定义存储数据</p><p>CGROM不可写，早已规定，相当于字典</p><p>字模库就是段码表</p><p>D(data)D(display)数据显示</p><p>DDRAM，用户可写，对应到屏幕的话只会显示前16列(前16列映射到屏幕上)，从第17列开始可以写，因为屏幕不够大所以显示不了(问题不大)</p><h3 id="3-段码表"><a href="#3-段码表" class="headerlink" title="3.段码表"></a>3.段码表</h3><p>我们先要有一个段码表，然后找索引对应屏幕里的</p><p><img src="/../../../../medias/blog_picture/51/78.png"></p><p>可写的只有八个，在0001 0000-0001 0111</p><p>不可写e.g.比如A，对应0100 0001–转16进制–&gt;0x41</p><h3 id="4-时序图"><a href="#4-时序图" class="headerlink" title="4.时序图"></a>4.时序图</h3><p><img src="/../../../../medias/blog_picture/51/79.png"></p><p><img src="/../../../../medias/blog_picture/51/80.png"></p><p>最高位为1位置不同可以区分不同的指令</p><ul><li>特别是在DB7置1绝对是要操作DDRAM</li></ul><h3 id="5-设置光标位置DDRAM-数据显示"><a href="#5-设置光标位置DDRAM-数据显示" class="headerlink" title="5.设置光标位置DDRAM(数据显示)"></a>5.设置光标位置DDRAM(数据显示)</h3><p><img src="/../../../../medias/blog_picture/51/81.png"></p><p>第一行：<strong>1</strong>000 0000 –&gt;0x80</p><p>第二行：<strong>1</strong>100 0000 –&gt;0xC0</p><p>两串的第一个<strong>1</strong>都代表要进入DDRAM这个指令</p><p>因为第一行的地址是00所以后接000 0000，第二行的地址是40所以后接100(二转十就是4) 0000</p><h2 id="二-代码部分"><a href="#二-代码部分" class="headerlink" title="二.代码部分"></a>二.代码部分</h2><h3 id="1-子函数"><a href="#1-子函数" class="headerlink" title="1.子函数"></a>1.子函数</h3><h4 id="①LCD-WriteCommand"><a href="#①LCD-WriteCommand" class="headerlink" title="①LCD_WriteCommand"></a>①LCD_WriteCommand</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Command<span class="token punctuation">)</span><span class="token punctuation">{</span>LCD_RS<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//0为指令</span>LCD_RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//0为输入</span>LCD_DataPort<span class="token operator">=</span>Command<span class="token punctuation">;</span>LCD_E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延缓快速上下拉</span>LCD_E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延缓快速上下拉</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="②LCD-DataCommand"><a href="#②LCD-DataCommand" class="headerlink" title="②LCD_DataCommand"></a>②LCD_DataCommand</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_WriteData</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Data<span class="token punctuation">)</span><span class="token punctuation">{</span>LCD_RS<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//0为数据</span>LCD_RW<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//0为输入</span>LCD_DataPort<span class="token operator">=</span>Data<span class="token punctuation">;</span>LCD_E<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延缓快速上下拉</span>LCD_E<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">LCD_Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延缓快速上下拉</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="③LCD-Init"><a href="#③LCD-Init" class="headerlink" title="③LCD_Init"></a>③LCD_Init</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//八位数据接口，两行显示，5x7点阵屏</span><span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x0C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//显示开，光标关，闪烁关</span><span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x06</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数据读写操作后，光标自动加一，画面不动</span><span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//清屏</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="④-LCD-ShowChar"><a href="#④-LCD-ShowChar" class="headerlink" title="④.LCD_ShowChar"></a>④.LCD_ShowChar</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">LCD_WriteCommand</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">|</span>Column<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>👆理解：Column是列。列-1再并上0x80才转换为对应的地址</p><ul><li>e.g. 当选择**(1,2)<strong>时，由</strong>DDRAM**的表格我们得知该位置的地址是01H</li><li>此时传参到Column的是2，2-1=1，1–10进制转2进制–&gt;0001</li><li>1000 0000|0000 0001=1000 0001</li><li>把<code>1</code> <code>000 0001</code>分成两个模块</li><li><code>1</code>是指进入DDRAM模式</li><li><code>000 0001</code>对应01H，写入到(1,2)位上</li></ul>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————蜂鸣器</title>
      <link href="/2022/10/18/ru-men-feng-ming-qi/"/>
      <url>/2022/10/18/ru-men-feng-ming-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="蜂鸣器"><a href="#蜂鸣器" class="headerlink" title="蜂鸣器"></a>蜂鸣器</h1><p><img src="/../../../../medias/blog_picture/51/64.png"></p><p>无源蜂鸣器不能一直通电流，它内部置了线圈，要给他交流震荡</p><p><img src="/../../../../medias/blog_picture/51/65.png"></p><p>VCC高电平，只有蜂鸣器接口处为0才能驱动；白色三角是非门，左边给1/0右边反0/1</p><p><img src="/../../../../medias/blog_picture/51/66.png"></p><h2 id="经典上代码"><a href="#经典上代码" class="headerlink" title="经典上代码"></a>经典上代码</h2><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Nixie.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Buzzer.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>KeyNum<span class="token operator">=</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Buzzer_Time</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>KeyNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Key-c"><a href="#Key-c" class="headerlink" title="Key.c"></a>Key.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment">/**  * @brief  获取独立按键键码  * @param  无  * @retval 按下按键的键码，范围：0~4，无按键按下时返回值为0  */</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNumber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_3<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_3<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> KeyNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nixie-c"><a href="#Nixie-c" class="headerlink" title="Nixie.c"></a>Nixie.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span><span class="token comment">//包含Delay头文件</span></span><span class="token comment">//数码管段码表</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数码管显示子函数</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span><span class="token comment">//位码输出</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>P2_4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P2_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P0<span class="token operator">=</span>NixieTable<span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//段码输出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Buzzer-c"><a href="#Buzzer-c" class="headerlink" title="Buzzer.c"></a>Buzzer.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H&gt;</span></span><span class="token comment">//蜂鸣器端口：</span>sbit Buzzer<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">/**  * @brief  蜂鸣器私有延时函数，延时500ms  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">Buzzer_Delay500us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//@11.0592MHz，专门为蜂鸣器写了一个</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span><span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">227</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**  * @brief  蜂鸣器发声  * @param  ms，发声的时长  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">Buzzer_Time</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//原来的Delay最小是1ms(半个周期)，那么1个周期是2ms，能达到的蜂鸣器最大频率是1/2*0.1^3=500Hz，蜂鸣器标准提示音是1000Hz</span><span class="token comment">//根据f=1/T，Delay(模块，不建议修改)的应该要更小，但是1已经是最小的</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ms<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//用for循环是为了让蜂鸣器响的久一点</span>        <span class="token comment">//*2的原因：现在的ms代表500us，不乘二，它只响ms/2毫秒，乘以二才是响ms毫秒</span><span class="token punctuation">{</span>Buzzer<span class="token operator">=</span><span class="token operator">!</span>Buzzer<span class="token punctuation">;</span><span class="token comment">//发声需要翻转两次io口</span><span class="token function">Buzzer_Delay500us</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//半个周期500us，一个周期1000us，频率1000Hz=1/1000*0.1^6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Buzzer-h"><a href="#Buzzer-h" class="headerlink" title="Buzzer.h"></a>Buzzer.h</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__Buzzer_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__Buzzer_H__</span></span>sbit Buzzer<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Buzzer_Time</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><p>音符–&gt;频率(Hz)–&gt;周期(us)–&gt;周期/2(us)–&gt;取整–&gt;<strong>重装数值(用到定时器)</strong></p><p><strong>周期</strong>=1/频率</p><p><strong>周期/2</strong>：半个周期翻转一次</p><p>周期/2-小数点=<strong>取整</strong></p><p>65535-取整=<strong>重装数值</strong></p><h4 id="用定时器操控频率"><a href="#用定时器操控频率" class="headerlink" title="用定时器操控频率"></a>用定时器操控频率</h4><h4 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Time0.h"</span></span>sbit Buzzer<span class="token operator">=</span>P2<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> FreqTable<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">63628</span><span class="token punctuation">,</span><span class="token number">63731</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//存放每个音的重载数值</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> FreqSelect<span class="token punctuation">;</span><span class="token comment">//对于数组FreqTable中每个数据对应的Index</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>FreqSelect<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在中断里每个500ms自动切换到下一个音</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token comment">//定时器初始化每隔1ms进行一次，所以每隔1ms中断一次</span><span class="token punctuation">{</span>TL0 <span class="token operator">=</span> FreqTable<span class="token punctuation">[</span>FreqSelect<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>TH0 <span class="token operator">=</span> FreqTable<span class="token punctuation">[</span>FreqSelect<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span><span class="token comment">//跟子函数里的设置不同在于，之后的溢出都是这里管理的，子函数那只管理一次</span>Buzzer<span class="token operator">=</span><span class="token operator">!</span>Buzzer<span class="token punctuation">;</span> <span class="token comment">//直接翻转，一个周期是2*1ms(翻转两次才是一个周期)，频率=1/2*1*0.1^3=500Hz</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Timer0-c"><a href="#Timer0-c" class="headerlink" title="Timer0.c"></a>Timer0.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token comment">/**  * @brief  定时器0初始化，1ms@11.0592MH  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//1毫秒@11.0592MHz</span><span class="token punctuation">{</span>TMOD <span class="token operator">&amp;=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式</span>TMOD <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>TL0 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span><span class="token comment">//TH0和TL0无关紧要，他们只决定第一次中断时间，因为溢出之后他们不清零，所以这里可以不改，只改主函数里的</span>TF0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清除TF0标志</span>TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定时器0开始计时</span>ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">//允许中断</span>EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>PT0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*定时器中断函数模板void Timer0_Routine() interrupt 1{static unsigned int T0Count;//为了不丢失这个数字TL0 = 0x66;//设置定时初值TH0 = 0xFC;//设置定时初值T0Count++;if(T0Count&gt;=1000){T0Count=0;}}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白————Calculator</title>
      <link href="/2022/10/13/xiao-bai-jian-yi-ji-suan-qi/"/>
      <url>/2022/10/13/xiao-bai-jian-yi-ji-suan-qi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;windows.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> o_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//符号栈头</span><span class="token keyword">int</span> num_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//数字栈头 </span><span class="token keyword">char</span> o_s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//符号栈 </span><span class="token keyword">int</span> num_s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数字栈 </span><span class="token keyword">int</span> <span class="token function">jop</span><span class="token punctuation">(</span><span class="token keyword">char</span> o<span class="token punctuation">)</span><span class="token comment">//判断符号等级 judge_operator_priority</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> o <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> o <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'^'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//操作符出栈 </span><span class="token keyword">void</span> <span class="token function">o_push</span><span class="token punctuation">(</span><span class="token keyword">char</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>o_top<span class="token operator">++</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//操作数出栈 </span><span class="token keyword">void</span> <span class="token function">num_push</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>num_top<span class="token operator">++</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//自定义两元运算</span><span class="token comment">//说明:operand1先进后出，operand2后进先出，所以运算的表达式应该为&lt;operand1&gt;&lt;oeprator&gt;&lt;operand2&gt; </span><span class="token keyword">int</span> <span class="token function">math</span><span class="token punctuation">(</span><span class="token keyword">int</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> n2<span class="token punctuation">,</span> <span class="token keyword">char</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span><span class="token keyword">return</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token keyword">return</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token keyword">return</span> n1 <span class="token operator">*</span> n2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">&amp;&amp;</span> n2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> n1 <span class="token operator">/</span> n2<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'/'</span> <span class="token operator">&amp;&amp;</span> n2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"出错！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token char">'^'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WB版计算器由于技术原因，仅支持以下运算....\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sleep(1500);</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1.带括号的+-*/运算\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sleep(1500);</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2.进制转换计算\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sleep(1500);</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"现在，请你输入“1”或“2”进行运算:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*当用户输入1时，进入4+1运算*/</span><span class="token comment">/*浅谈规则：1.操作符栈栈顶为空 或 栈顶操作符优先级&lt;当前操作符 时，当前操作符入栈2.栈顶操作符优先级&gt;目前操作符 且 数据栈至少有2个操作数 且 栈顶不为( 时，栈顶操作符出栈3.whlie循环次数是&lt;而不是&lt;= 的原因:最后出现x1(由这个while循环计算得到的数据)o x2(原表达式最后的操作数)4.每次运算后(调用了math函数后)，将该次运算结果放回栈中(补到栈顶下面那个)，然后再声明栈顶设其为0，进行栈顶--，使栈顶回到含有有效数据那*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//记录算式</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please enter the equation(no space):\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">num_push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//+ -</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o_top <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>num_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o_top <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num_top <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">math</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>num_top<span class="token operator">--</span><span class="token punctuation">;</span> o_top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//* /</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o_top <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o_top <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num_top <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">math</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>num_top<span class="token operator">--</span><span class="token punctuation">;</span> o_top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// ^ </span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'^'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o_top <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o_top <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num_top <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">math</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>num_top<span class="token operator">--</span><span class="token punctuation">;</span> o_top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">o_push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// )</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">math</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>num_top<span class="token operator">--</span><span class="token punctuation">;</span> o_top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">jop</span><span class="token punctuation">(</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> o_top <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num_top <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>o_top<span class="token operator">--</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//最后只剩下两个操作数和一个操作符，直接二元运算 </span><span class="token keyword">while</span> <span class="token punctuation">(</span>o_top <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num_top <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">math</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num_s<span class="token punctuation">[</span>num_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>o_s<span class="token punctuation">[</span>o_top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>num_top<span class="token operator">--</span><span class="token punctuation">;</span> o_top<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num_s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*当用户输入2时，进行进制转换*/</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/**  n进制转10进制*/</span><span class="token keyword">int</span> pr<span class="token punctuation">;</span><span class="token comment">//previous,先前的进制 </span><span class="token keyword">int</span> fn<span class="token punctuation">;</span><span class="token comment">//final，最后的进制</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment">//用于测量长度 </span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"即将输入三个数字，输入每个数字后，按回车转跳下一个输入内容......\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入原进制："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入原数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入想要转换成的数据的进制："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp1 <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>pr<span class="token punctuation">,</span> size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp2 <span class="token operator">=</span> ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token char">'A'</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'B'</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'C'</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'D'</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'E'</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token char">'F'</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span>temp2 <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">*</span> temp1<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/**10进制转n进制*/</span><span class="token keyword">char</span> ans<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token comment">//答案存放 </span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> fn<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'C'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">13</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'D'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">14</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">15</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> fn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>j<span class="token operator">++</span><span class="token punctuation">;</span>sum <span class="token operator">/=</span> fn<span class="token punctuation">;</span><span class="token punctuation">}</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大云屋考核 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————点阵屏</title>
      <link href="/2022/10/12/ru-men-dian-zhen-ping/"/>
      <url>/2022/10/12/ru-men-dian-zhen-ping/</url>
      
        <content type="html"><![CDATA[<h1 id="点阵屏"><a href="#点阵屏" class="headerlink" title="点阵屏"></a>点阵屏</h1><p>跟数码管原理有一些类似</p><p><img src="/../../../../medias/blog_picture/51/4.png" alt="显示原理"></p><p><img src="/../../../../medias/blog_picture/51/5.png" alt="行与列的控制关系"></p><p>圈起来部分用来控制<strong>行</strong>或<strong>列</strong></p><p><img src="/../../../../medias/blog_picture/51/6.png" alt="开发板引脚对应关系"></p><p>列直接给P0赋值来控制</p><p>但是行要用到74HC595</p><p>提出：若是单片机上只有这个LED点阵屏，其他都不要，可不可以把D1-D7的接在P1口上</p><p>回答：不行，因为单片机的IO口是弱上拉特性</p><p>弱上拉：输出**低电平(直接接GND)<strong>时电流可以很大，输出</strong>高电平(相当于接了一个电阻再接VCC)**时电流很小</p><p><img src="/../../../../medias/blog_picture/51/7.png" alt="IO口">用到三极管，接IO口就可以</p><p>IO口低电平，VCC直接通到4那，IO起控制作用，自己干不动不干活而指使别人干活</p><p>IO口给高电平的时候就会截止，相当于没有接</p><h2 id="IO口扩展"><a href="#IO口扩展" class="headerlink" title="IO口扩展"></a>IO口扩展</h2><h3 id="OE-output-enable输出使能"><a href="#OE-output-enable输出使能" class="headerlink" title="OE(output enable输出使能)"></a>OE(output enable输出使能)</h3><p><img src="/../../../../medias/blog_picture/51/8.png" alt="OE"></p><h3 id="寄存器时钟，RCLK-register-clock"><a href="#寄存器时钟，RCLK-register-clock" class="headerlink" title="寄存器时钟，RCLK(register clock)"></a>寄存器时钟，RCLK(register clock)</h3><p>上方有—，表示它要接低电平，所以JOE那要和GND短接，才能有输出</p><p><img src="/../../../../medias/blog_picture/51/9.png" alt="RCLK"></p><h3 id="SRCLR串行清零端"><a href="#SRCLR串行清零端" class="headerlink" title="SRCLR串行清零端"></a>SRCLR串行清零端</h3><p>接了VCC代表它不清空</p><p><img src="/../../../../medias/blog_picture/51/10.png" alt="SRCLR"></p><h3 id="SRCLK串行时钟"><a href="#SRCLK串行时钟" class="headerlink" title="SRCLK串行时钟"></a>SRCLK串行时钟</h3><p>上升沿是PWM波的从低电平到高电平的一瞬间</p><p><img src="/../../../../medias/blog_picture/51/11.png" alt="SRCLK"></p><h3 id="SER串行数据"><a href="#SER串行数据" class="headerlink" title="SER串行数据"></a>SER串行数据</h3><p><img src="/../../../../medias/blog_picture/51/12.png" alt="SER"></p><p>主要用这三个引脚控制八个输出</p><p><img src="/../../../../medias/blog_picture/51/13.png" alt="三个引脚控制八个输出"></p><h3 id="串行vs并行"><a href="#串行vs并行" class="headerlink" title="串行vs并行"></a>串行vs并行</h3><p><img src="/../../../../medias/blog_picture/51/14.png" alt="串行是这样子一个一个出去的"></p><p>并行是用那八个输出端同时输出</p><h3 id="串行输入-并行输出"><a href="#串行输入-并行输出" class="headerlink" title="串行输入 并行输出"></a>串行输入 并行输出</h3><p>每上升沿移位，从SER进的数据就向下沿移位，SERCLK高电平的时候移进，数据一位一位地往前走，等有了八位数据之后同时搬过去输出缓存那，串行那里每输入一位，SER清零，数据下移</p><p><img src="/../../../../medias/blog_picture/51/15.png" alt="74HC595"></p><p>当寄存器满位后，给RCLK高电平，把数据搬运到输出缓存那</p><h3 id="多片级联"><a href="#多片级联" class="headerlink" title="多片级联"></a>多片级联<img src="/../../../../medias/blog_picture/51/16.png" alt="多片级联"></h3><p>在寄存器的数据传到QH’，然后多片级联到下一个SER，当所有数据就位了，来一个上升沿锁存，所有数据都相应地输出，实现了IO口的扩展，但是速率会有所减慢(时间换时空)</p><h2 id="sfr和sbit可位寻址-不可位寻址"><a href="#sfr和sbit可位寻址-不可位寻址" class="headerlink" title="sfr和sbit可位寻址/不可位寻址"></a>sfr和sbit可位寻址/不可位寻址</h2><p>sfr：特殊功能寄存器声明(声明寄存器地址)相当于把某个元件的操作地址赋给一个自定义的变量名，把相应的名称和地址给声明出来，我们才能操作那个名称</p><p>sbit：特殊位声明(声明地址的某一位)</p><p><img src="/../../../../medias/blog_picture/51/17.png" alt="C51的sfr、sbit"></p><p>可位寻址和不可位寻址就类比于C语言的数组，可位寻址的就是数组的首地址，不是首地址的就不能位寻址</p><h2 id="上代码-笑脸"><a href="#上代码-笑脸" class="headerlink" title="上代码(笑脸)"></a>上代码(笑脸)</h2><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment">//给IO口改名</span>sbit RCK<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//RCLK,应该是赋值的时候用_，给地址的时候用^，这里是让rclk直接找到p3_5的地址所以用^</span>sbit SCK<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//SRCLK</span>sbit SER<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//SER</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MATRIX_LED_PORT</span> <span class="token expression">P0</span><span class="token comment">//如果以后自己焊板子玩接口不对，直接改上面sbit，不用再在下面改了</span></span><span class="token comment">/**  * @brief  74HC595写入一个字节  * @param  要写入的字节  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">_74JHC595_WriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>SER<span class="token operator">=</span>Byte<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0x80--&gt;1000 0000</span>SCK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//给高电平形成上升沿传入数据</span>SCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//置零为下一次传入做准备</span><span class="token punctuation">}</span>RCK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//高电平，形成上升沿锁存</span>RCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//置零</span><span class="token punctuation">}</span><span class="token comment">/*** @brief  LED点阵屏显示一列数据* @param  Column 要选择的列，范围0~7，0在最左边* @param  Data 选择列显示的数据，高位在上，1为亮，0为灭* @retval 无  */</span><span class="token keyword">void</span> <span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cloumn<span class="token punctuation">,</span>Data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">_74JHC595_WriteByte</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放数据</span>MATRIX_LED_PORT<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>Cloumn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//位选；选择列，然后把数据0xAA传到LED列中；</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时</span>MATRIX_LED_PORT<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//位清零，下一步是段选，这样下次段选就不会串位到上一个位选了</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>SCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//因为上电默认高电平,先置0，才能给高电平；需要一个上升沿才能传入数据</span>RCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化为低电平</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0xA9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0xA9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抠-理-解-开抠！！！"><a href="#抠-理-解-开抠！！！" class="headerlink" title="抠 理 解      开抠！！！"></a>抠 理 解      开抠！！！</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>SER<span class="token operator">=</span>Byte<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0x80--&gt;1000 0000</span>SCK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//给高电平形成上升沿传入数据</span>SCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//置零为下一次传入做准备</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SER是一位而Byte是8位，涉及到位对齐问题</p><p>理解：假如Byte是0x55(0101 0101)</p><p>i=0(0x80&gt;&gt;i)=1000 0000</p><p>SER=<strong>0</strong>101 0101 &amp; <strong>1</strong>000 0000 =<strong>0</strong>000 0000——-根据非<strong>0</strong>即1，SER为<strong>0</strong></p><p>i=1(0x80&gt;&gt;i)=0100 0000</p><p>SER=0<strong>1</strong>01 0101 &amp; 0<strong>1</strong>00 0000 =0<strong>1</strong>00 0000——-根据非0即<strong>1</strong>，SER为<strong>1</strong></p><p>.</p><p>.</p><p>.</p><p>i=7(0x80&gt;&gt;i)=0000 0001</p><p>SER=0101 010<strong>1</strong> &amp; 0000 0001 =0000 0001——-根据非0即<strong>1</strong>，SER为<strong>1</strong></p><p><img src="/../../../../medias/blog_picture/51/18.png" alt="最后变成这样"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SCK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//给高电平形成上升沿传入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/51/19.png" alt="."></p><p>段选 位选 <strong>延时</strong> <strong>位清零</strong> 段选 位选</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** @brief  LED点阵屏显示一列数据* @param  Column 要选择的列，范围0~7，0在最左边* @param  Data 选择列显示的数据，高位在上，1为亮，0为灭* @retval 无*/</span><span class="token keyword">void</span> <span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cloumn<span class="token punctuation">,</span>Data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">_74JHC595_WriteByte</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放数据</span>MATRIX_LED_PORT<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>Cloumn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//位选；选择列，然后把数据0xAA传到LED列中；</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时</span>MATRIX_LED_PORT<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//位清零，下一步是段选，这样下次段选就不会串位到上一个位选了</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">MATRIX_LED_PORT<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>Cloumn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里取反是为了让1表示亮，0表示灭，同时&gt;&gt;补位补的是0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="上代码-Hello-滚屏"><a href="#上代码-Hello-滚屏" class="headerlink" title="上代码(Hello!滚屏)"></a>上代码(Hello!滚屏)</h2><h3 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MatrixLED.h"</span></span><span class="token comment">//code 把Animation的数据放在flash里(内存大)，把run的空间腾出来做其他事情，缺点是Animation的数据不能再更改了(只能读取不能写入)</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code Animation<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7E</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x0E</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span>Offset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//offset偏移量</span><span class="token function">MartrixLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Animation<span class="token punctuation">[</span>i<span class="token operator">+</span>Offset<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//不能用Delay,不然会出现闪屏现象</span><span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Offset<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Offset<span class="token operator">&gt;</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment">//写这个为了不让Offset溢出产生乱码</span><span class="token punctuation">{</span>Offset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//相当于扫了10遍后移向下一帧</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>①先解释主函数的for</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>Animation<span class="token punctuation">[</span>i<span class="token operator">+</span>Offset<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个<strong>MatrixLED_ShowColumn</strong>是放数据，安排每一列的，i表示列，Animation[]是数组，<strong>i+Offset</strong>是要把<strong>一幕中的八列</strong>都打出来</p><p><strong>②if</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//不能用Delay,不然会出现闪屏现象</span><span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Offset<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Offset<span class="token operator">&gt;</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token comment">//写这个为了不让Offset溢出产生乱码</span><span class="token punctuation">{</span>Offset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用Count来计时，当Count&gt;10后，<strong>Offset++，屏幕中的画面开始往右移，每次移动一列，</strong>Offset&gt;40，这个40=<strong>8*6(全部)—8(第一幕的不需要移动)</strong></p><p><strong>③有16个0x00</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> code Animation<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让**H的左边的|<strong>从最后一列出现，让</strong>!**从第一列离开</p><h3 id="MatrixLED-c-是上一个主函数里扒拉下来的"><a href="#MatrixLED-c-是上一个主函数里扒拉下来的" class="headerlink" title="MatrixLED.c(是上一个主函数里扒拉下来的)"></a>MatrixLED.c(是上一个主函数里扒拉下来的)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment">//给IO口改名</span>sbit RCK<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//RCLK,应该是赋值的时候用_，给地址的时候用^，这里是让rclk直接找到p3_5的地址所以用^</span>sbit SCK<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">//SRCLK</span>sbit SER<span class="token operator">=</span>P3<span class="token operator">^</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//SER</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MATRIX_LED_PORT</span> <span class="token expression">P0</span><span class="token comment">//如果以后自己焊板子玩接口不对，直接改上面sbit，不用再在下面改了</span></span><span class="token comment">/**  * @brief  74HC595写入一个字节  * @param  要写入的字节  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">_74JHC595_WriteByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>SER<span class="token operator">=</span>Byte<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0x80--&gt;1000 0000</span>SCK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//给高电平形成上升沿传入数据</span>SCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//置零为下一次传入做准备</span><span class="token punctuation">}</span>RCK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//高电平，形成上升沿锁存</span>RCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//置零</span><span class="token punctuation">}</span><span class="token comment">/**  * @brief  点阵屏初始化  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">MartrixLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>SCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//因为上电默认高电平,先置0，才能给高电平；需要一个上升沿才能传入数据</span>RCK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始化为低电平</span><span class="token punctuation">}</span><span class="token comment">/*** @brief  LED点阵屏显示一列数据* @param  Column 要选择的列，范围0~7，0在最左边* @param  Data 选择列显示的数据，高位在上，1为亮，0为灭* @retval 无  */</span><span class="token keyword">void</span> <span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cloumn<span class="token punctuation">,</span>Data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">_74JHC595_WriteByte</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放数据</span>MATRIX_LED_PORT<span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span>Cloumn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//位选；选择列，然后把数据0xAA传到列中；</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时</span>MATRIX_LED_PORT<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//位清零，下一步是段选，这样下次段选就不会串位到上一个位选了</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MatrixLED-h"><a href="#MatrixLED-h" class="headerlink" title="MatrixLED.h"></a>MatrixLED.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__MATRIXLED_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__MATRIXLED_H__</span></span><span class="token keyword">void</span> <span class="token function">MatrixLED_ShowColumn</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Cloumn<span class="token punctuation">,</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MartrixLED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入土————串口通信</title>
      <link href="/2022/10/11/ru-tu-chuan-kou-tong-xin/"/>
      <url>/2022/10/11/ru-tu-chuan-kou-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h1><p><img src="/../../../../medias/blog_picture/51/32.png" alt="硬件电路"></p><h3 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h3><p>TTL：+5V表示1，0V表示0</p><p><img src="E:\Users\Wabby\AppData\Roaming\Typora\typora-user-images\1665028662515.png" alt="1665028662515"></p><p>异步：A发了1s的1和1s的0，那B就可以连续两次0.5s发1和两次0.5s的0</p><p><img src="/../../../../medias/blog_picture/51/33.png"></p><p><img src="/../../../../medias/blog_picture/51/34.png" alt="串口参数及时序图"></p><h3 id="检验位-9位"><a href="#检验位-9位" class="headerlink" title="检验位(9位)"></a>检验位(9位)</h3><p>奇校验</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//收：0000 0011 1</span><span class="token comment">//发：0000 0011 1</span><span class="token comment">//但是如果是0000 1010 1就也会补1，排错率不高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//收：1110 0000 0</span><span class="token comment">//发：1100 0000 0</span><span class="token comment">//这时就是错误的，说明数据出了问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/51/35.png" alt="串口模式图"></p><p>中间圈起来那块是控制波特率的</p><p>发送寄存器： X=SBUF</p><p>接收寄存器：SBUF=X</p><h2 id="通信初实现"><a href="#通信初实现" class="headerlink" title="通信初实现"></a>通信初实现</h2><p><strong>16位定时器/计时器</strong>和<strong>8位自动重装载</strong>的区别</p><p>就是十六位记的数多，但每次都需要自己写的代码赋初值，浪费时间。双八位就是将十六位分开，一个计数，另一个存放初值，每次计数完成后AR会自动将值赋给CNT，不用代码处理，比较快，但只有八位所以记的数少了。</p><h3 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">void</span> <span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//4800bps@11.0592MHz</span><span class="token punctuation">{</span><span class="token comment">//串口部分</span>SCON <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">//8位数据,可变波特率</span>PCON <span class="token operator">&amp;=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span><span class="token comment">//定时器1部分，T1是串口专用的定时器</span>TMOD <span class="token operator">&amp;=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式</span>TMOD <span class="token operator">|=</span> <span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式</span>TL1 <span class="token operator">=</span> <span class="token number">0xFA</span><span class="token punctuation">;</span><span class="token comment">//设定定时初值</span>TH1 <span class="token operator">=</span> <span class="token number">0xFA</span><span class="token punctuation">;</span><span class="token comment">//设定定时器重装值</span>ET1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//禁止定时器1中断</span>TR1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//启动定时器1</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Byte<span class="token punctuation">)</span><span class="token punctuation">{</span>SBUF<span class="token operator">=</span>Byte<span class="token punctuation">;</span><span class="token comment">//SBUF写入,被赋值</span><span class="token keyword">while</span><span class="token punctuation">(</span>TI<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//本来TI=0，但是在数据传输完成之后串口会自动将1赋给TI,因此需要软件进行复位。</span>TI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//软件复位</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="①串口部分SCON-serial-control-PCON-power-control"><a href="#①串口部分SCON-serial-control-PCON-power-control" class="headerlink" title="①串口部分SCON(serial control)&amp;PCON(power control)"></a>①串口部分SCON(serial control)&amp;PCON(power control)</h4><p><img src="/../../../../medias/blog_picture/51/36.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SCON <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">//8位数据,可变波特率</span>PCON <span class="token operator">&amp;=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="SM0-SM1"><a href="#SM0-SM1" class="headerlink" title="SM0&amp;SM1"></a>SM0&amp;SM1</h5><p><img src="/../../../../medias/blog_picture/51/37.png"></p><p><img src="/../../../../medias/blog_picture/51/38.png"></p><p><strong>REN给0/1都可以</strong></p><p><img src="/../../../../medias/blog_picture/51/39.png"></p><p><img src="/../../../../medias/blog_picture/51/40.png"></p><p><strong>SM2，TB8，RB8跟模式1无关，给0</strong></p><p><img src="/../../../../medias/blog_picture/51/41.png"></p><p>就是发送结束后，硬件给T1置1，表示发送完了，然后请求中断的时候TI=0，必须用软件复位是指要人为在软件中使TI=1</p><p><strong>TI=0</strong> —发送–完毕—-硬件–&gt; <strong>T1=1</strong> –请求中断–&gt; <strong>TI=1</strong> –主机响应中断—-软件复位&gt; <strong>TI=0</strong></p><p>TI最开始为0</p><p><img src="/../../../../medias/blog_picture/51/42.png"></p><p>对RI的理解和TI一样</p><p><strong>所以SCON=0100 0000 –&gt; 0x40</strong></p><h4 id="②PCON，用波特率计算搞出来的"><a href="#②PCON，用波特率计算搞出来的" class="headerlink" title="②PCON，用波特率计算搞出来的"></a>②PCON，用波特率计算搞出来的</h4><h3 id="定时器部分"><a href="#定时器部分" class="headerlink" title="定时器部分"></a>定时器部分</h3><p>要改为定时器1</p><p><img src="/../../../../medias/blog_picture/51/43.png"></p><p><img src="/../../../../medias/blog_picture/51/44.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TMOD <span class="token operator">&amp;=</span> <span class="token number">0x0F</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span> <span class="token number">0000</span> <span class="token number">1111</span>TMOD <span class="token operator">|=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>    <span class="token operator">|</span> <span class="token number">0010</span> <span class="token number">0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="小小问题"><a href="#小小问题" class="headerlink" title="小小问题"></a>小小问题</h3><p>当我把下面这串</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改成</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当为0x11时正常且不断输出11，当为0x66时异常且不断输出96，是因为波特率的误差，此时我们让它翻慢点就可以正常输出了(让他稳定点)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">UART_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">UART_SendByte</span><span class="token punctuation">(</span><span class="token number">0x11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//让他慢慢翻</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/51/45.png" alt="串口和中断系统"></p><p>我们要启用串口中断，而不是定时器中断，定时器中断是到点了就中断，串口中断是有数据过来中断，所以要配置定时器不中断即ET1等于0，然后开启串口中断</p><h2 id="中断服务函数"><a href="#中断服务函数" class="headerlink" title="中断服务函数"></a>中断服务函数</h2><p>模板</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UART_Rountine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token comment">//中断服务子函数</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>RI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UART_Rountine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">4</span><span class="token comment">//中断服务子函数</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>RI<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//区分发送和接收，发送和接收都会触发中断</span> <span class="token comment">//而且二者占用同一个通道，写这个是为了判断，然后把发送和接受分开</span><span class="token punctuation">{</span>P2<span class="token operator">=</span><span class="token operator">~</span>SBUF<span class="token punctuation">;</span><span class="token function">UART_SendByte</span><span class="token punctuation">(</span>SBUF<span class="token punctuation">)</span><span class="token punctuation">;</span>RI<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算波特率"><a href="#算波特率" class="headerlink" title="算波特率"></a>算波特率</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">TL1 <span class="token operator">=</span> <span class="token number">0xFA</span><span class="token punctuation">;</span><span class="token comment">//设定定时初值</span>TH1 <span class="token operator">=</span> <span class="token number">0xFA</span><span class="token punctuation">;</span><span class="token comment">//设定定时器重装值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>FA–16转10–&gt; 250</p><p>那么一个TL1/TH1对应8byte，也就是256，定时器每隔256-250=6µs溢出一次(每计6个数就溢出一次)，11.0529MHz晶振对应12T模式下的0.924µs计数一次</p><p>溢出的频率=0.924/6=0.154MHz</p><p>0.154MHz/16=0.009625MHz</p><p>0.009625×1000×1000=9625？<strong>应该是接近4800的才对</strong>………up主用的12MHz来算，算到了4807</p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入土————定时器和定时器时钟</title>
      <link href="/2022/10/10/ru-tu-ding-shi-qi-he-ding-shi-qi-shi-zhong/"/>
      <url>/2022/10/10/ru-tu-ding-shi-qi-he-ding-shi-qi-shi-zhong/</url>
      
        <content type="html"><![CDATA[<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p><img src="/../../../../medias/blog_picture/51/46.png" alt="定时器框图"></p><p><img src="/../../../../medias/blog_picture/51/47.png"></p><p>按视频中的去理解，up主的板子晶振为12MHz，如果分频接了÷12的线路，那么传给计数器的就会是1µs计数一次(计算:<strong>1/(12MHz/12)=1/1*10^9s=1µs</strong>)</p><p>CT选择开关：那里给<strong>1</strong>是<strong>counter计数器</strong>  给<strong>0</strong>是<strong>timer定时器</strong></p><p>GATE那里：三角是异门(1–&gt;0  0—&gt;1)，第二个是或门(只有00情况给0，其余给1)，第三个是与门<strong>跟C的异或与的与意思差不多</strong></p><p><img src="/../../../../medias/blog_picture/51/48.png"></p><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="1-TMOD-TIME-MODE"><a href="#1-TMOD-TIME-MODE" class="headerlink" title="1.TMOD(TIME_MODE)"></a>1.TMOD(TIME_MODE)</h3><p><img src="/../../../../medias/blog_picture/51/49.png"></p><p>由于TMOD不可寻址，所以要<strong>整体</strong>表示</p><p>(对于**(不)可寻址<strong>的理解，</strong>可寻址<strong>像之前的点LED灯，直接P2=0x01&lt;==&gt;P2_1=1然后P2_2~8=0，</strong>不可寻址**就是只能一坨地表示，就像P2=0x00这样)</p><p><strong>目的</strong>：我们要实现<strong>定时器0</strong>运行且进入<strong>模式1</strong></p><h4 id="①M0-M1"><a href="#①M0-M1" class="headerlink" title="①M0&amp;M1"></a>①M0&amp;M1</h4><p><img src="/../../../../medias/blog_picture/51/50.png"></p><p>所以<strong>M0–&gt;1</strong>，<strong>M1–&gt;0</strong></p><h4 id="②C-T"><a href="#②C-T" class="headerlink" title="②C/T"></a>②C/T</h4><p><img src="/../../../../medias/blog_picture/51/51.png"></p><p>因为是定时器 <strong>C/T–&gt;0</strong></p><h4 id="③GATE"><a href="#③GATE" class="headerlink" title="③GATE"></a>③GATE</h4><p><img src="/../../../../medias/blog_picture/51/52.png"></p><p>要让TR0参与控制，所以<strong>GATE–&gt;0</strong></p><p><strong>附GATE的运行模式</strong></p><p><img src="/../../../../medias/blog_picture/51/53.png"></p><h4 id="因此"><a href="#因此" class="headerlink" title="因此"></a>因此</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">TMOD=0X01;//0000 0001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TMOD的优化"><a href="#TMOD的优化" class="headerlink" title="TMOD的优化"></a>TMOD的优化</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">TMOD <span class="token operator">&amp;=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式       0xF0--&gt;1111 0000</span>TMOD <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>      <span class="token comment">//                    0x01--&gt;0000 0001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于TMOD是<strong>同时控制定时器0和定时器1</strong>，我们希望在控制定时器0的时候，<strong>不影响到可能正在工作的定时器1</strong>，于是用到了以下操作</p><p>e.g.</p><p>原TMOD=1010 0011—我们希望把它转换为—&gt;1010 0001</p><p><strong>1st——-1010 0011 &amp; 1111 0000 =1010 0000</strong></p><p><strong>理解</strong>：<strong>n &amp; 1 <strong>时，n为几就返回几(此时不影响定时器1)；</strong>n &amp; 0 <strong>时，全为0(有点</strong>初始化</strong>定时器0的感觉)</p><p><strong>2nd——1010 0000 | 0000 0001 =1010 0001</strong></p><p><strong>理解</strong>：<strong>n | 0 <strong>时，n为几就返回几(还是不影响定时器1)；</strong>0 | n</strong> 时，n为几也返回几(n是人工决定的，这时可以自行操控定时器0了)</p><h3 id="2-TCON"><a href="#2-TCON" class="headerlink" title="2.TCON"></a>2.TCON</h3><p><img src="/../../../../medias/blog_picture/51/54.png"></p><h4 id="①TR0"><a href="#①TR0" class="headerlink" title="①TR0"></a>①TR0</h4><p><img src="/../../../../medias/blog_picture/51/55.png"></p><p><strong>省流</strong>：GATE=0 &amp;&amp; TR0=1时允许T0计数，开始工作</p><pre class="line-numbers language-none"><code class="language-none">TR0=1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="②TF0"><a href="#②TF0" class="headerlink" title="②TF0"></a>②TF0</h4><p><img src="/../../../../medias/blog_picture/51/56.png"></p><p><strong>省流</strong>：TF0=1时就产生中断，所以要=0，防止刚配置好就产生中断</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TF0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="③TH0-TL0"><a href="#③TH0-TL0" class="headerlink" title="③TH0&amp;TL0"></a>③TH0&amp;TL0</h4><p><img src="/../../../../medias/blog_picture/51/57.png"></p><p>来自弹幕大佬：两个寄存器TH0、TL0为<strong>二进制八位</strong>(2^8)，<strong>单独</strong>可计256次，<strong>低八位计满256次后高八位进1</strong>，所以<strong>除以256</strong>可得<strong>高八位</strong>得次数，<strong>取余</strong>就是<strong>低八位</strong>的次数，合并在一起就是所赋的初始值</p><p>来自UP主：<strong>123</strong>要放到两个<strong>容量</strong>为100的盒子里，<strong>高位次</strong>的盒子存储—<strong>123/100=1</strong>，<strong>低位次</strong>的盒子存储—<strong>123%100=23</strong>，<strong>合并</strong>之后就是123(初始值)</p><p><strong>对应项目，就是两个容量为256的小盒子要存储64535这个庞然大物</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">TH0<span class="token operator">=</span><span class="token number">64535</span><span class="token operator">/</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment">//high，拿出高八位</span>TL0<span class="token operator">=</span><span class="token number">64535</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span><span class="token comment">//low，拿出低八位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="④ET0-EA-PT0"><a href="#④ET0-EA-PT0" class="headerlink" title="④ET0&amp;EA&amp;PT0"></a>④ET0&amp;EA&amp;PT0</h4><p><img src="/../../../../medias/blog_picture/51/58.png"></p><p>把通道打通</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ET0=1;EA=1;PT0=0;//虽然默认PT0为0，但还是说明一下比较好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-Time0-c"><a href="#3-Time0-c" class="headerlink" title="3.Time0.c"></a>3.Time0.c</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token comment">/**  * @brief  定时器0初始化，1ms@11.0592MH  * @param  无  * @retval 无  */</span><span class="token keyword">void</span> <span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//1毫秒@11.0592MHz</span><span class="token punctuation">{</span>TMOD <span class="token operator">&amp;=</span> <span class="token number">0xF0</span><span class="token punctuation">;</span><span class="token comment">//设置定时器模式       0xF0--&gt;1111 0000</span>TMOD <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>     <span class="token comment">//                     0x0x--&gt;0000 0001</span>TL0 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>    <span class="token comment">/**    64535/256=252    252--10进制转16进制--&gt;FC        64535%256=23    23--10进制转16进制--&gt;17    但是我们这个有0.04%的偏差，所以...问题...应该不大吧...    */</span>TF0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//清除TF0标志</span>TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定时器0开始计时</span>ET0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">//允许中断</span>EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>PT0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*定时器中断函数模板void Timer0_Routine() interrupt 1{static unsigned int T0Count;//为了不丢失这个数字TL0 = 0x66;//设置定时初值TH0 = 0xFC;//设置定时初值T0Count++;if(T0Count&gt;=1000){//这里要写具体实现什么T0Count=0;}}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对定时器中断函数模板的理解：</p><p>首先，中断程序本身可视为一个while循环，会一直执行这个函数</p><p>其次，对于秒数，这个计时器(TH0 TL0)<strong>最高可达到65535µs</strong>，我们设置定时初值时，用的是64535，它<strong>距离65535还有1000才即将溢出归零</strong>，所以我们让计时器计时1000µs(=1ms)，**每过1ms，T0Count++**，当它加了1000次，此时已经过去1000ms(=1s)</p><p>最后，进入if执行具体实现，然后把T0Count归零，进入下一次中断程序(循环)</p><h3 id="4-新学两个函数"><a href="#4-新学两个函数" class="headerlink" title="4.新学两个函数"></a>4.新学两个函数</h3><p><strong>要用到#include&lt;INTRINS.H&gt;头文件</strong></p><h4 id="crol函数-cror函数-头尾都要"><a href="#crol函数-cror函数-头尾都要" class="headerlink" title="crol函数&amp;cror函数(..头尾都要_.."></a>crol函数&amp;cror函数(..头尾都要_..</h4><p>循环移位</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a<span class="token operator">=</span><span class="token number">0x80</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token function">_crol_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a为0x01，循环回去开头了</span><span class="token comment">//如果是&lt;&lt;的话，移到边界就溢出越界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-最终呈现"><a href="#5-最终呈现" class="headerlink" title="5.最终呈现"></a>5.最终呈现</h3><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Timer0.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Key.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H&gt;</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">,</span>LEDMode<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>P2<span class="token operator">=</span><span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//P2是LED模块噢，一端接了VCC，那么只有给P2_n赋值为0的时候才亮，0xFE转二进制为1111 1110</span><span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>KeyNum<span class="token operator">=</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LEDMode<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span>LEDMode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//定时器和主程序的耦合性比较大，所以直接放到主函数使用</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span><span class="token comment">//为了不丢失这个数字</span>TL0 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>T0Count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>T0Count<span class="token operator">&gt;=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token comment">//0.5s亮一次</span><span class="token punctuation">{</span>T0Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>P2<span class="token operator">=</span><span class="token function">_crol_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>P2<span class="token operator">=</span><span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对<strong>流水</strong>效果，我们添加了这些</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>T0Count<span class="token operator">&gt;=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">{</span>T0Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>           P2<span class="token operator">=</span><span class="token function">_crol_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往左流</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>P2<span class="token operator">=</span><span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往右流</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配合主函数食用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">,</span>LEDMode<span class="token punctuation">;</span> <span class="token comment">//一开始初始化了KeyNum和LEDMode，这两个玩意初始值都为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么，当开关被按下的时候，<strong>LEDMode==0</strong>，开始往左流，对应下面这句</p><pre class="line-numbers language-none"><code class="language-none">if(LEDMode==0)           P2=_crol_(P2,1);//往左流<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后接收KeyNum，当我不按P3_1时，LEDMode就一直为0，一直往左流</p><p>我按下P3_1时，配合Key.c食用，此时<strong>返回KeyNumber=1</strong></p><h4 id="Key-c"><a href="#Key-c" class="headerlink" title="Key.c"></a>Key.c</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token comment">/**  * @brief  获取独立按键键码  * @param  无  * @retval 按下按键的键码，范围：0~4，无按键按下时返回值为0  */</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNumber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//介里介里！</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_0<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_2<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_3<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_3<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> KeyNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>KeyNum==1</strong>后，执行</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LEDMode<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span>LEDMode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候LEDMode++，<strong>LEDMode==1</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>LEDMode<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>P2<span class="token operator">=</span><span class="token function">_cror_</span><span class="token punctuation">(</span>P2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//往右流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次按下P3_1时，LEDMode++，<strong>LEDMode==2</strong>，然后执行if让LEDMode归零</p><h1 id="定时器时钟"><a href="#定时器时钟" class="headerlink" title="定时器时钟"></a>定时器时钟</h1><h3 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Timer0.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Sec<span class="token punctuation">,</span>Min<span class="token punctuation">,</span>Hour<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Timer0Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Clock:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"  :  :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Hour<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>Min<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>Sec<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Timer0_Routine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> T0Count<span class="token punctuation">;</span><span class="token comment">//为了不丢失这个数字</span>TL0 <span class="token operator">=</span> <span class="token number">0x66</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>TH0 <span class="token operator">=</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment">//设置定时初值</span>T0Count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>T0Count<span class="token operator">&gt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>T0Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Sec<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Sec<span class="token operator">&gt;=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Sec<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Min<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Min<span class="token operator">&gt;=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Min <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>Hour<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>Hour<span class="token operator">&gt;=</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Hour<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个，不难理解，dddd</p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————矩阵键盘</title>
      <link href="/2022/10/10/ru-men-ju-zhen-jian-pan/"/>
      <url>/2022/10/10/ru-men-ju-zhen-jian-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1矩阵键盘"><a href="#6-1矩阵键盘" class="headerlink" title="6-1矩阵键盘"></a>6-1矩阵键盘</h1><p><img src="/../../../../medias/blog_picture/51/20.png" alt="矩阵按键"></p><p><img src="/../../../../medias/blog_picture/51/21.png" alt="芯片引脚"></p><p>前四根线(P17~P14)判断行，给0相当于接地**(由上面这幅图我们知道P1的一端已经接在了VCC，所以要让P1_x运行，要给它低电平，即0)**，此时io口为低电平</p><p>后四根(P13~P10)判断该行对应的某一个按键</p><h2 id="下面的代码主要是实现控制矩阵键盘，并把按下去的键位对应的数字在LCD1602上显示出来"><a href="#下面的代码主要是实现控制矩阵键盘，并把按下去的键位对应的数字在LCD1602上显示出来" class="headerlink" title="下面的代码主要是实现控制矩阵键盘，并把按下去的键位对应的数字在LCD1602上显示出来"></a>下面的代码主要是实现控制矩阵键盘，并把按下去的键位对应的数字在LCD1602上显示出来</h2><p>ps:常见的Delay就不放出来了，懂得都懂</p><p>matrix矩阵</p><h3 id="MatrixKey-h"><a href="#MatrixKey-h" class="headerlink" title="MatrixKey.h"></a>MatrixKey.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__MATRIXKEY_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__MATRIXKEY_H__</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MatrixKey-c"><a href="#MatrixKey-c" class="headerlink" title="MatrixKey.c"></a>MatrixKey.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNumber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>P1<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//有点相当于初始化</span>P1_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P1<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span>P1_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P1<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span>P1_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P1<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span>P1_0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> KeyNumber<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以发现这个函数代码是由<strong>四组模板一样</strong>的小代码组成的，下面将拎一组出来解释</p><p><img src="/../../../../medias/blog_picture/51/22.png" alt="矩阵按键"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">P1<span class="token operator">=</span><span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//让所有的P1口都为1，就是不对他们进行操作，让他们处于standby状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">P1_3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//"唤醒"列，我们先控制P1_3,让他为0，处于运行状态--①</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//然后逐个判断用户按下了哪个键位+按键消抖，检测松手，赋相应的值给KeyNumber</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_7<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//--②</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_6<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//--③</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_5<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//--④</span><span class="token keyword">if</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P1_4<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>KeyNumber<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//--⑤</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MatrixKey.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//初始化</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Martix:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从第一行第一列开始输入</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>KeyNum<span class="token operator">=</span><span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//把返回的KeyNumber赋值给KeyNum</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>KeyNum<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我们要在这句话中才能让灯亮起来，关键在于让KeyNum为0的时候根本读不到这句话</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**对于if的解释       iiiiiiimportant!!!!!!    **</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>KeyNum<span class="token operator">=</span><span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//把返回的KeyNumber赋值给KeyNum</span>     <span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>KeyNum<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​如果没有<strong>if</strong>，先进入<strong>while(1)<strong>循环中，那么当用户</strong>按下S1</strong>的时候，<strong>Matrix函数</strong>返回<strong>KeyNumber</strong>的值给主函数的<strong>KeyNum</strong>，此时<strong>KeyNum为1</strong>，LCD1602<strong>迅速地显示“1”</strong>(很快啊！肉眼根本看不见的那种)，随即<strong>跳出此次的while(1)循环并进入下一次while(1)循环</strong>，因为下一刻用户不可能速速按下某个键位，所以这时候<strong>Matrix函数</strong>中初始化的那句</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNumber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会直接被返回到主函数的<strong>KeyNum</strong>中，即<strong>KeyNum为0</strong>，所以，我们看到的现象是，无论怎么按都只会显示0，其实有显示过1的，但是太快了，看不见。</p><p>​那么，我们加了**if(KeyNum)**后，当默认为0的时候，if判断为假，就不会出现0，因为为0的时候，根本不会进入到LCD_ShowNum中执行，所以一直显示的是按下去的键位的辣个数字。</p><h2 id="强迫症-专业注释"><a href="#强迫症-专业注释" class="headerlink" title="强迫症+专业注释"></a>强迫症+专业注释</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/**  * @brief  简介  * @param  参数1  * @param  参数2  * @param  参数n  * @retval 返回值  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-2-矩阵键盘密码锁"><a href="#6-2-矩阵键盘密码锁" class="headerlink" title="6-2 矩阵键盘密码锁"></a>6-2 矩阵键盘密码锁</h1><p><strong>以下代码是在6-1的基础上修改的</strong>，所以不再放出Matrix函数，直接上main.c</p><p>ps:注释不会改中文哈哈哈打出来全是”?”，因此以后的<strong>注释</strong>都是<strong>全(塑料/工地)英制</strong></p><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"LCD1602.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MatrixKey.h"</span></span><span class="token comment">//初始定义未赋初值时默认赋值为0</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> KeyNum<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Password<span class="token punctuation">,</span>Count<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">LCD_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Password:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>KeyNum<span class="token operator">=</span><span class="token function">MatrixKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">//if S1~S10keys are pressed ,input password</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//if the time of inout &lt; 4 </span><span class="token punctuation">{</span>Password<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//password RL </span>Password<span class="token operator">+=</span>KeyNum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//consider the situation of when user press s10 then output 0 ,and get one password</span>Count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//metering +1</span><span class="token punctuation">}</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//when finishe the enter,updata the display</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment">//if press S11---&gt;confirm</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>Password<span class="token operator">==</span><span class="token number">2345</span><span class="token punctuation">)</span>  <span class="token comment">//if the password == the correct password</span><span class="token punctuation">{</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display0</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">LCD_ShowSrting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"ERR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment">//if press S12---&gt; cancel</span><span class="token punctuation">{</span>Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们一节一节地看，以下从用户按下某个键位开始，即从**if(KeyNum)**开始往下看</p><h3 id="输入Password"><a href="#输入Password" class="headerlink" title="输入Password"></a>输入Password</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">//if S1~S10keys are pressed ,input password</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>Count<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//if the time of inout &lt; 4 </span><span class="token punctuation">{</span>Password<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//password RL </span>Password<span class="token operator">+=</span>KeyNum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//consider the situation of when user press s10 then ouput 0 ,and get one password</span>Count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//metering +1</span><span class="token punctuation">}</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的设定是，<strong>按下S1~S10时</strong>，对应1~0，这里用到的很妙的一招是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Password<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>Password<span class="token operator">+=</span>KeyNum<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Password自×10，则相当于<strong>所有数字往左移动一位</strong>，<strong>待输入的数字由0占据</strong></p><p>再输入的数字<strong>一定是从个位开始</strong>，然后在按下下一个按键时，往左移动，就，<strong>很妙啊！</strong></p><p>然后再设定只能输入4次，噢对了，我们<strong>在一开始设置了全局变量</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Password<span class="token punctuation">,</span>Count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以Password和Count<strong>初始值都是0</strong>，因此<strong>Count&lt;4</strong>即<strong>输入四次</strong></p><h3 id="确认键"><a href="#确认键" class="headerlink" title="确认键"></a>确认键</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment">//if press S11---&gt;confirm</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>Password<span class="token operator">==</span><span class="token number">2345</span><span class="token punctuation">)</span>  <span class="token comment">//if the password == the correct password</span><span class="token punctuation">{</span><span class="token function">LCD_ShowString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">LCD_ShowSrting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">"ERR"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，我们<strong>约定了2345是正确密码</strong>，当输入了2345时按下S11会<strong>出现”OK”</strong></p><p>然后，就是输入完毕后<strong>一切归零</strong>，即让用户<strong>再次输入(无论输入正确与否)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>先让Password重置为0</p><p>然后计数Count也为0</p><p>一切都回到最开始的样子，即全局变量初始化的样子</p><h3 id="取消键"><a href="#取消键" class="headerlink" title="取消键"></a>取消键</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>KeyNum<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment">//if press S12---&gt; cancel</span><span class="token punctuation">{</span>Password<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//the password zero clearing</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//metering zero clearing</span><span class="token function">LCD_ShowNum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>Password<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//updata the display</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了上面的解释，这个应该不难理解吧</p><h1 id="关于LCD1602-c"><a href="#关于LCD1602-c" class="headerlink" title="关于LCD1602.c"></a>关于LCD1602.c</h1><p><img src="/../../../../medias/blog_picture/51/23.png" alt="LCD1602内部显示地址"></p><p><img src="/../../../../medias/blog_picture/51/24.png" alt="举例说明"></p>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————模块化编程</title>
      <link href="/2022/10/02/ru-men-mo-kuai-hua-bian-cheng/"/>
      <url>/2022/10/02/ru-men-mo-kuai-hua-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1模块化编程"><a href="#5-1模块化编程" class="headerlink" title="5-1模块化编程"></a>5-1模块化编程</h1><p><img src="/../../../../medias/blog_picture/51/1.png" alt="模块化编程框图"></p><p><img src="/../../../../medias/blog_picture/51/2.png" alt="模块化编程注意事项"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Delay函数的声明就在第一行那</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/51/3.png" alt="C预编译"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_DELAY_H_</span><span class="token comment">//如果没有定义就执行编译(第一次没有定义才参与编译定义)防止多次编译</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_DELAY_H_</span></span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例操作"><a href="#实例操作" class="headerlink" title="实例操作"></a>实例操作</h2><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token comment">//调用函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Nixie.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Delay-c"><a href="#Delay-c" class="headerlink" title="Delay.c"></a>Delay.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>xms<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Delay-h"><a href="#Delay-h" class="headerlink" title="Delay.h"></a>Delay.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__DELAY_H__</span><span class="token comment">//如果没有定义过这个函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__DELAY_H__</span><span class="token comment">//则开始定义</span></span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nixie-c"><a href="#Nixie-c" class="headerlink" title="Nixie.c"></a>Nixie.c</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span><span class="token comment">//因为在声明时用到了P0 P2这种没有被说明的量，所以要引入这个头文件说明</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Delay.h"</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//111-8</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//110-7</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P0<span class="token operator">=</span>NixieTable<span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nixie-h"><a href="#Nixie-h" class="headerlink" title="Nixie.h"></a>Nixie.h</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NIXIE_H__</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NIXIE_H__</span></span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门————最初的笔记</title>
      <link href="/2022/10/02/ru-men-zui-chu-de-bi-ji/"/>
      <url>/2022/10/02/ru-men-zui-chu-de-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1点亮一个LED"><a href="#2-1点亮一个LED" class="headerlink" title="2-1点亮一个LED"></a>2-1点亮一个LED</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;INTRINS.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//对应1111 1110即只有D1亮</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//亮了后等500ms</span>P2 <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//对应 1111 1111 即都不亮</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不亮后等500ms</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/51/25.png" alt="LED模块"></p><p>解释：为什么1不亮0亮，是因为LED一端接了VCC高电平，则另一端应该给低电平即0，才有电流输出</p><h1 id="2-3流水灯"><a href="#2-3流水灯" class="headerlink" title="2-3流水灯"></a>2-3流水灯</h1><h2 id="①"><a href="#①" class="headerlink" title="①"></a>①</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;REGX52.H&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;INTRINS.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token function">_nop_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token number">119</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//1111 1110</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span><span class="token comment">//1111 1101</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span><span class="token comment">//1111 1011</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xF7</span><span class="token punctuation">;</span><span class="token comment">//1111 0111</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span><span class="token comment">//1110 1111</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span><span class="token comment">//1101 1111</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span><span class="token comment">//0111 1111</span><span class="token function">Delay500ms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="②"><a href="#②" class="headerlink" title="②"></a>②</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token comment">/**对while循环的理解:这个Delay1ms是针对1ms的，当下面程序需要n个1ms，就会循环n次1ms延时的程序*/</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>xms<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//上面自定义函数</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>P2 <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//1111 1110</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xFD</span><span class="token punctuation">;</span><span class="token comment">//1111 1101</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xFB</span><span class="token punctuation">;</span><span class="token comment">//1111 1011</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xF7</span><span class="token punctuation">;</span><span class="token comment">//1111 0111</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span><span class="token comment">//1110 1111</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xDF</span><span class="token punctuation">;</span><span class="token comment">//1101 1111</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2 <span class="token operator">=</span> <span class="token number">0x7F</span><span class="token punctuation">;</span><span class="token comment">//0111 1111</span><span class="token function">Delay1ms</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-1独立按键控制LED灯亮灭"><a href="#3-1独立按键控制LED灯亮灭" class="headerlink" title="3-1独立按键控制LED灯亮灭"></a>3-1独立按键控制LED灯亮灭</h1><p><img src="/../../../../medias/blog_picture/51/26.png" alt="独立按键"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//P_3对应第一个独立按键，表示按下该按键时，执行下面语句</span><span class="token punctuation">{</span>P2_0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>P2_0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>xms<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果还按着，就不执行下面的，进入死循环</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>P2_0 <span class="token operator">=</span> <span class="token operator">~</span>P2_0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">3.3</span>独立按键控制LED显示二进制①<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LEDNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//P2 1111 1111 (初始化)</span>P2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//P2溢出变为0000 0000</span>P2<span class="token operator">=</span><span class="token operator">~</span>P2<span class="token punctuation">;</span><span class="token comment">//取反1111 1111</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>②<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LEDNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LEDNum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//初始时LEDNum为0000 0000？</span>P2<span class="token operator">=</span><span class="token operator">~</span>LEDNum<span class="token punctuation">;</span><span class="token comment">//取反</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<strong>按键消抖，检测松手</strong>的理解：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果按了P3_1</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先延时20ms，跳过抖动阶段(消抖)</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果还按着P3_1，则进入while的空循环，没有任何执行任务</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//松开手后，跳出while循环，再次进入抖动阶段(消抖)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-4独立按键控制LED位移"><a href="#3-4独立按键控制LED位移" class="headerlink" title="3-4独立按键控制LED位移"></a>3-4独立按键控制LED位移</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> LEDNum<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>P2 <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//把P2 =~0x01; 挪过来也一样</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LEDNum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//实现每次右移，++几次就右移几下</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDNum <span class="token operator">&gt;=</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LEDNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P2 <span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>LEDNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>P3_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>P3_0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LEDNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//即此时亮的灯为D1，P2为0000 0001，当num=7后，0x01&lt;&lt;LEDNum&lt;==&gt;0000 0001的1往左移动7位，即1000 0000，亮的是D8，左移成功</span><span class="token punctuation">{</span>LEDNum <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>LEDNum<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment">//实现每次左移，++几次就左移几下</span><span class="token punctuation">}</span>P2 <span class="token operator">=</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token operator">&lt;&lt;</span>LEDNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-1静态数码管位移"><a href="#4-1静态数码管位移" class="headerlink" title="4-1静态数码管位移"></a>4-1静态数码管位移</h1><p>共阴极，亮的为1(共阴极–高电平)</p><p>1011 1110为段码(显示6)</p><p>共阳极，亮的为0(共阳极–低电平)</p><p>段码为0100 0001 </p><p>共阴极:</p><p>当只需要亮第三个数字时，第124的共阴极处连接高电平(给1)，而第3的共阴极给0，则只有第三个灯会亮，至于怎么亮，看上面两个例子</p><p>ps:四组A/B/C….都接在同一个1174211053那里(共用引脚，四个数字只能是一样的  )</p><p>74HC245为双向数据缓冲器：VDD和GND为电源，OE为芯片使能端,A0与B0对应….</p><p>DIR–&gt;direction，数据读取方向</p><p>当LE接VCC时，A0传数据给B0</p><p>高电平驱动能力弱，低电平驱动能力强，所以这个缓冲器可以增强信号，使数码管更亮</p><p><strong>//以上是之前没在typora写的笔记，不再做过多的补充和修改</strong></p><h1 id="4-1静态数码管位移-1"><a href="#4-1静态数码管位移-1" class="headerlink" title="4-1静态数码管位移"></a>4-1静态数码管位移</h1><p><strong>目的：实现第三个数码管亮起</strong></p><p><img src="/../../../../medias/blog_picture/51/27.png" alt="数码管"></p><p><strong>第三个灯</strong>对应的是<strong>LED6</strong></p><p><img src="/../../../../medias/blog_picture/51/28.png" alt="138译码器"></p><p><strong>P2_4 P2_3 P2_2—–&gt;Y5—–&gt;LED6</strong></p><p>根据十进制转二进制，Y5的5转为二进制是101，则有</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../medias/blog_picture/51/29.png" alt="数码管"></p><p>此时要让LED6亮起6，则acdefg为1(共阴极)<strong>因为他们后面接到了GND(低电平)，要给他高电平对应)<strong>，对应到P0口则是(要</strong>从下往上</strong>读，即从<strong>P0_7</strong>读到<strong>P0_0</strong>)<strong>0111 1101</strong>二进制转十六进制，则为0x7D</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//下面的三步操作是让P2接口对应到Y5，“101”是因为5(10进制)转为二进制时对应的值是101</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//P0这看代码前面的解释</span>P0 <span class="token operator">=</span> <span class="token number">0x7D</span><span class="token punctuation">;</span><span class="token comment">//为了让第三个位置的灯亮起</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用数组实现"><a href="#使用数组实现" class="headerlink" title="使用数组实现"></a>使用数组实现</h2><p><code>对于Number</code></p><p><img src="/../../../../medias/blog_picture/51/30.png" alt="显示的字母转为2进制推算"></p><p><strong>静态显示(只能有一个数字)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//0~9--&gt;0~9 10-d 11-y</span><span class="token comment">//自定义函数</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//单片机上第一个位置的灯对应的是LED8</span>        <span class="token comment">//这里用138译码器实现，取值顺序CBA</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//111-8-第一盏灯</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//110-7-第二盏灯</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P0<span class="token operator">=</span>NixieTable<span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在该位置上亮起的数字</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//位置(第几个数码管)，数字(如果是字母的话，那就是所要的字母对应数组的位置的位次)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三位对应138译码器的ABC口</p><p><img src="/../../../../medias/blog_picture/51/31.png" alt="138译码器"></p><p><strong>动态显示(多个数字，需要消影)</strong></p><p>消影</p><p>位选 段选 位选 段选**(进行下一次位选时，段选没有改变)**</p><p>改成：位选 段选 <strong>清零</strong> 位选 段选</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;REGX52.H&gt;</span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> NixieTable<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x3F</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">,</span><span class="token number">0x4F</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6D</span><span class="token punctuation">,</span><span class="token number">0x7D</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x7F</span><span class="token punctuation">,</span><span class="token number">0x6F</span><span class="token punctuation">,</span><span class="token number">0x5E</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//0~9--&gt;0~9 10-d 11-y</span><span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms<span class="token punctuation">)</span><span class="token comment">//@11.0592MHz</span><span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>xms<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">=</span> <span class="token number">199</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> Location<span class="token punctuation">,</span>Number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span><span class="token punctuation">(</span>Location<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//1st light--&gt; LED8</span><span class="token comment">//8th light--&gt; LED1</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>P2_4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>P2_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> P2_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>P0<span class="token operator">=</span>NixieTable<span class="token punctuation">[</span>Number<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把这句话删掉的话就没那么亮，应该是让一个位置上的数据管亮完1ms后迅速清零，然后再亮下一个，三个管都亮完只需要3ms，且中间有清零过程，所以视觉上看到的时三管灯同时亮</span>P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment">//清零过程，不让别的数码管瞎亮</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Nixie</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 51单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51单片机 </tag>
            
            <tag> 大云屋考核 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
